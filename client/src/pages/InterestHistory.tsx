import { useQuery } from "@tanstack/react-query";
import { Calendar, TrendingUp, User, Wallet } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import type { InterestEntry } from "@shared/schema";

interface InterestEntryWithBorrower extends Omit<InterestEntry, 'borrowerName'> {
  borrowerName: string | null;
}

export default function InterestHistory() {
  const { data: entries = [], isLoading } = useQuery<InterestEntryWithBorrower[]>({
    queryKey: ['/api/interest-entries'],
  });

  const formatCurrency = (amount: string | number) => {
    const num = typeof amount === 'string' ? parseFloat(amount) : amount;
    return `â‚¹${num.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
  };

  const formatDate = (date: Date | string) => {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    return dateObj.toLocaleDateString('en-IN', {
      day: '2-digit',
      month: 'short',
      year: 'numeric'
    });
  };

  const formatPeriod = (start: Date | string, end: Date | string) => {
    const startDate = typeof start === 'string' ? new Date(start) : start;
    const endDate = typeof end === 'string' ? new Date(end) : end;
    
    const startMonth = startDate.toLocaleDateString('en-IN', { month: 'short', year: 'numeric' });
    const endMonth = endDate.toLocaleDateString('en-IN', { month: 'short', year: 'numeric' });
    
    if (startMonth === endMonth) {
      return startMonth;
    }
    return `${startMonth} - ${endMonth}`;
  };

  const totalInterest = entries.reduce(
    (sum, entry) => sum + parseFloat(entry.interestAmount),
    0
  );

  return (
    <div className="p-8 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-semibold">Interest History</h1>
          <p className="text-muted-foreground mt-1">
            Track monthly interest calculations across all loans
          </p>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium text-muted-foreground">
              Total Interest Entries
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold" data-testid="text-total-entries">
              {entries.length}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium text-muted-foreground">
              Total Interest Calculated
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-green-600" data-testid="text-total-interest">
              {formatCurrency(totalInterest)}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium text-muted-foreground">
              Auto-Generated Entries
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold" data-testid="text-auto-entries">
              {entries.filter(e => e.isAutoGenerated).length}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Interest Entries List */}
      {isLoading ? (
        <div className="space-y-4">
          {[1, 2, 3, 4].map((i) => (
            <Skeleton key={i} className="h-32" data-testid={`skeleton-entry-${i}`} />
          ))}
        </div>
      ) : entries.length === 0 ? (
        <div className="p-12 text-center border rounded-lg">
          <TrendingUp className="h-16 w-16 mx-auto mb-4 opacity-50 text-muted-foreground" />
          <h3 className="text-lg font-semibold mb-2">No Interest Entries Yet</h3>
          <p className="text-muted-foreground mb-4">
            Interest entries will be automatically generated monthly for your active loans
          </p>
          <p className="text-sm text-muted-foreground">
            The system checks daily and creates interest entries on each loan's monthly anniversary
          </p>
        </div>
      ) : (
        <div className="space-y-4">
          {entries.map((entry) => (
            <Card key={entry.id} className="hover-elevate" data-testid={`card-interest-${entry.id}`}>
              <CardContent className="p-6">
                <div className="flex items-start justify-between">
                  <div className="flex-1 space-y-3">
                    <div className="flex items-center gap-3">
                      <div className="h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center">
                        <User className="h-5 w-5 text-primary" />
                      </div>
                      <div>
                        <h3 className="font-semibold" data-testid={`text-borrower-${entry.id}`}>
                          {entry.borrowerName || 'Unknown Borrower'}
                        </h3>
                        <p className="text-sm text-muted-foreground">
                          {formatPeriod(entry.periodStart, entry.periodEnd)}
                        </p>
                      </div>
                      {entry.isAutoGenerated && (
                        <Badge variant="secondary" className="text-xs">
                          Auto-Generated
                        </Badge>
                      )}
                    </div>

                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
                      <div>
                        <p className="text-sm text-muted-foreground flex items-center gap-1">
                          <Wallet className="h-3 w-3" />
                          Principal
                        </p>
                        <p className="font-semibold" data-testid={`text-principal-${entry.id}`}>
                          {formatCurrency(entry.principalAmount)}
                        </p>
                      </div>

                      <div>
                        <p className="text-sm text-muted-foreground flex items-center gap-1">
                          <TrendingUp className="h-3 w-3" />
                          Interest Rate
                        </p>
                        <p className="font-semibold" data-testid={`text-rate-${entry.id}`}>
                          {entry.interestRate}%
                        </p>
                      </div>

                      <div>
                        <p className="text-sm text-muted-foreground flex items-center gap-1">
                          <Calendar className="h-3 w-3" />
                          Period Start
                        </p>
                        <p className="font-semibold text-sm" data-testid={`text-period-start-${entry.id}`}>
                          {formatDate(entry.periodStart)}
                        </p>
                      </div>

                      <div>
                        <p className="text-sm text-muted-foreground flex items-center gap-1">
                          <Calendar className="h-3 w-3" />
                          Period End
                        </p>
                        <p className="font-semibold text-sm" data-testid={`text-period-end-${entry.id}`}>
                          {formatDate(entry.periodEnd)}
                        </p>
                      </div>
                    </div>

                    {entry.notes && (
                      <p className="text-sm text-muted-foreground italic mt-2">
                        {entry.notes}
                      </p>
                    )}
                  </div>

                  <div className="ml-6 text-right">
                    <p className="text-sm text-muted-foreground mb-1">Interest Amount</p>
                    <p className="text-2xl font-bold text-green-600" data-testid={`text-interest-amount-${entry.id}`}>
                      {formatCurrency(entry.interestAmount)}
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}
