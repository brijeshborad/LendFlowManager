{"file_contents":{"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"server/emailService.ts":{"content":"import type { EmailTemplate, EmailLog, InsertEmailLog } from \"@shared/schema\";\n\nexport interface EmailProvider {\n  sendEmail(params: SendEmailParams): Promise<EmailResponse>;\n}\n\nexport interface SendEmailParams {\n  to: string;\n  subject: string;\n  html: string;\n  text?: string;\n  from?: string;\n  replyTo?: string;\n}\n\nexport interface EmailResponse {\n  success: boolean;\n  messageId?: string;\n  error?: string;\n}\n\nclass ResendProvider implements EmailProvider {\n  private apiKey: string;\n  private fromEmail: string;\n\n  constructor(apiKey: string, fromEmail: string) {\n    this.apiKey = apiKey;\n    this.fromEmail = fromEmail;\n  }\n\n  async sendEmail(params: SendEmailParams): Promise<EmailResponse> {\n    try {\n      const response = await fetch('https://api.resend.com/emails', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          from: params.from || this.fromEmail,\n          to: params.to,\n          subject: params.subject,\n          html: params.html,\n          text: params.text,\n          reply_to: params.replyTo,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        return {\n          success: false,\n          error: data.message || 'Failed to send email',\n        };\n      }\n\n      return {\n        success: true,\n        messageId: data.id,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n}\n\nclass SendGridProvider implements EmailProvider {\n  private apiKey: string;\n  private fromEmail: string;\n\n  constructor(apiKey: string, fromEmail: string) {\n    this.apiKey = apiKey;\n    this.fromEmail = fromEmail;\n  }\n\n  async sendEmail(params: SendEmailParams): Promise<EmailResponse> {\n    try {\n      const response = await fetch('https://api.sendgrid.com/v3/mail/send', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          personalizations: [{\n            to: [{ email: params.to }],\n          }],\n          from: { email: params.from || this.fromEmail },\n          subject: params.subject,\n          content: [\n            {\n              type: 'text/html',\n              value: params.html,\n            },\n            ...(params.text ? [{\n              type: 'text/plain',\n              value: params.text,\n            }] : []),\n          ],\n          reply_to: params.replyTo ? { email: params.replyTo } : undefined,\n        }),\n      });\n\n      if (!response.ok) {\n        const data = await response.json();\n        return {\n          success: false,\n          error: data.errors?.[0]?.message || 'Failed to send email',\n        };\n      }\n\n      const messageId = response.headers.get('x-message-id');\n      return {\n        success: true,\n        messageId: messageId || undefined,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n}\n\nclass MockEmailProvider implements EmailProvider {\n  async sendEmail(params: SendEmailParams): Promise<EmailResponse> {\n    console.log('📧 Mock Email Service - Would send:', {\n      to: params.to,\n      subject: params.subject,\n      from: params.from,\n    });\n    \n    return {\n      success: true,\n      messageId: `mock-${Date.now()}`,\n    };\n  }\n}\n\nexport class EmailService {\n  private provider: EmailProvider;\n  private enabled: boolean;\n\n  constructor() {\n    const emailProvider = process.env.EMAIL_PROVIDER; // 'resend' | 'sendgrid' | 'mock'\n    const apiKey = process.env.EMAIL_API_KEY;\n    const fromEmail = process.env.EMAIL_FROM_ADDRESS || 'noreply@example.com';\n\n    this.enabled = !!emailProvider && emailProvider !== 'mock';\n\n    if (emailProvider === 'resend' && apiKey) {\n      this.provider = new ResendProvider(apiKey, fromEmail);\n      console.log('✅ Email service initialized with Resend');\n    } else if (emailProvider === 'sendgrid' && apiKey) {\n      this.provider = new SendGridProvider(apiKey, fromEmail);\n      console.log('✅ Email service initialized with SendGrid');\n    } else {\n      this.provider = new MockEmailProvider();\n      console.log('⚠️  Email service running in MOCK mode - set EMAIL_PROVIDER and EMAIL_API_KEY to enable');\n    }\n  }\n\n  async sendEmail(params: SendEmailParams): Promise<EmailResponse> {\n    return await this.provider.sendEmail(params);\n  }\n\n  async sendTemplatedEmail(\n    template: EmailTemplate,\n    to: string,\n    variables: Record<string, string>\n  ): Promise<EmailResponse> {\n    let html = template.htmlBody || '';\n    let subject = template.subject;\n\n    // Replace variables in template (e.g., {{borrowerName}})\n    Object.keys(variables).forEach(key => {\n      const placeholder = `{{${key}}}`;\n      html = html.replace(new RegExp(placeholder, 'g'), variables[key]);\n      subject = subject.replace(new RegExp(placeholder, 'g'), variables[key]);\n    });\n\n    return await this.sendEmail({\n      to,\n      subject,\n      html,\n    });\n  }\n\n  isEnabled(): boolean {\n    return this.enabled;\n  }\n}\n\n// Singleton instance\nexport const emailService = new EmailService();\n","size_bytes":5359},"client/src/components/examples/AddPaymentModal.tsx":{"content":"import { useState } from 'react';\nimport { AddPaymentModal } from '../AddPaymentModal';\nimport { Button } from '@/components/ui/button';\n\nexport default function AddPaymentModalExample() {\n  const [open, setOpen] = useState(true);\n\n  return (\n    <div className=\"p-6\">\n      <Button onClick={() => setOpen(true)}>Open Payment Modal</Button>\n      <AddPaymentModal\n        open={open}\n        onClose={() => setOpen(false)}\n        borrowerName=\"Rajesh Kumar\"\n        pendingInterest=\"₹2.4L\"\n      />\n    </div>\n  );\n}\n","size_bytes":520},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport multer from \"multer\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { emailService } from \"./emailService\";\nimport { reminderService } from \"./reminderService\";\nimport {\n  insertBorrowerSchema,\n  insertLoanSchema,\n  insertPaymentSchema,\n  insertReminderSchema,\n  insertEmailTemplateSchema,\n} from \"@shared/schema\";\nimport {\n  getUserInterestEntries,\n  getInterestHistory,\n  generateMonthlyInterestEntries,\n  calculateOutstandingInterest,\n  generateHistoricalInterestEntries,\n} from \"./interestCalculationService\";\nimport { sendMonthlyInterestReminders, getSchedulerStatus } from \"./reminderSchedulerService\";\n\nconst upload = multer({ dest: \"uploads/\" });\n\n// WebSocket connection tracking\nconst wsClients = new Map<string, Set<WebSocket>>();\n\nfunction broadcastToUser(userId: string, message: any) {\n  const userSockets = wsClients.get(userId);\n  if (userSockets) {\n    const data = JSON.stringify(message);\n    userSockets.forEach((ws) => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.send(data);\n      }\n    });\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get(\"/api/auth/user\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error: any) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.patch(\"/api/auth/user/preferences\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.updateUserPreferences(userId, req.body);\n      res.json(user);\n    } catch (error: any) {\n      console.error(\"Error updating preferences:\", error);\n      res.status(500).json({ message: \"Failed to update preferences\" });\n    }\n  });\n\n  // Notifications route\n  app.get(\"/api/notifications\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      // For now, return mock notifications\n      // TODO: Implement proper notification storage and retrieval\n      const notifications = [\n        {\n          id: \"1\",\n          title: \"Payment Received\",\n          message: \"Payment of ₹50,000 received from John Doe\",\n          type: \"payment\",\n          read: false,\n          createdAt: new Date(Date.now() - 1000 * 60 * 30).toISOString(), // 30 min ago\n        },\n        {\n          id: \"2\",\n          title: \"Interest Generated\",\n          message: \"Monthly interest of ₹5,000 calculated for Loan #1234\",\n          type: \"interest\",\n          read: false,\n          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(), // 2 hours ago\n        },\n        {\n          id: \"3\",\n          title: \"Reminder Sent\",\n          message: \"Payment reminder sent to Jane Smith\",\n          type: \"reminder\",\n          read: true,\n          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(), // 1 day ago\n        },\n      ];\n      res.json(notifications);\n    } catch (error: any) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  // Borrower routes\n  app.get(\"/api/borrowers\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const borrowers = await storage.getBorrowers(userId);\n      res.json(borrowers);\n    } catch (error: any) {\n      console.error(\"Error fetching borrowers:\", error);\n      res.status(500).json({ message: \"Failed to fetch borrowers\" });\n    }\n  });\n\n  app.get(\"/api/borrowers/:id\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const borrower = await storage.getBorrower(req.params.id, userId);\n      if (!borrower) {\n        return res.status(404).json({ message: \"Borrower not found\" });\n      }\n      res.json(borrower);\n    } catch (error: any) {\n      console.error(\"Error fetching borrower:\", error);\n      res.status(500).json({ message: \"Failed to fetch borrower\" });\n    }\n  });\n\n  app.post(\"/api/borrowers\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validated = insertBorrowerSchema.parse({ ...req.body, userId });\n      const borrower = await storage.createBorrower(validated);\n      \n      await storage.createAuditLog({\n        userId,\n        action: \"create_borrower\",\n        entityType: \"borrower\",\n        entityId: borrower.id,\n        changes: { borrowerName: borrower.name },\n        ipAddress: req.ip,\n        userAgent: req.get(\"user-agent\"),\n      });\n\n      broadcastToUser(userId, {\n        type: \"borrower_created\",\n        data: borrower,\n      });\n\n      res.status(201).json(borrower);\n    } catch (error: any) {\n      console.error(\"Error creating borrower:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create borrower\" });\n    }\n  });\n\n  app.patch(\"/api/borrowers/:id\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const borrower = await storage.updateBorrower(req.params.id, userId, req.body);\n      \n      await storage.createAuditLog({\n        userId,\n        action: \"update_borrower\",\n        entityType: \"borrower\",\n        entityId: borrower.id,\n        changes: req.body,\n        ipAddress: req.ip,\n        userAgent: req.get(\"user-agent\"),\n      });\n\n      broadcastToUser(userId, {\n        type: \"borrower_updated\",\n        data: borrower,\n      });\n\n      res.json(borrower);\n    } catch (error: any) {\n      console.error(\"Error updating borrower:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update borrower\" });\n    }\n  });\n\n  app.delete(\"/api/borrowers/:id\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      await storage.deleteBorrower(req.params.id, userId);\n      \n      await storage.createAuditLog({\n        userId,\n        action: \"delete_borrower\",\n        entityType: \"borrower\",\n        entityId: req.params.id,\n        ipAddress: req.ip,\n        userAgent: req.get(\"user-agent\"),\n      });\n\n      broadcastToUser(userId, {\n        type: \"borrower_deleted\",\n        data: { id: req.params.id },\n      });\n\n      res.status(204).send();\n    } catch (error: any) {\n      console.error(\"Error deleting borrower:\", error);\n      res.status(500).json({ message: \"Failed to delete borrower\" });\n    }\n  });\n\n  // Loan routes\n  app.get(\"/api/loans\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const borrowerId = req.query.borrowerId as string | undefined;\n      const loans = await storage.getLoans(userId, borrowerId);\n      res.json(loans);\n    } catch (error: any) {\n      console.error(\"Error fetching loans:\", error);\n      res.status(500).json({ message: \"Failed to fetch loans\" });\n    }\n  });\n\n  app.get(\"/api/loans/:id\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const loan = await storage.getLoan(req.params.id, userId);\n      if (!loan) {\n        return res.status(404).json({ message: \"Loan not found\" });\n      }\n      res.json(loan);\n    } catch (error: any) {\n      console.error(\"Error fetching loan:\", error);\n      res.status(500).json({ message: \"Failed to fetch loan\" });\n    }\n  });\n\n  app.post(\"/api/loans\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      // Convert startDate string to Date object\n      const loanData = {\n        ...req.body,\n        userId,\n        startDate: req.body.startDate ? new Date(req.body.startDate) : new Date(),\n      };\n      const validated = insertLoanSchema.parse(loanData);\n      const loan = await storage.createLoan(validated);\n      \n      // Generate historical interest entries if the loan has a past start date\n      try {\n        const result = await generateHistoricalInterestEntries(\n          loan.id,\n          userId,\n          loan.borrowerId,\n          loan.startDate,\n          loan.principalAmount,\n          loan.interestRate,\n          loan.interestRateType as 'monthly' | 'annual'\n        );\n        console.log(`Generated ${result.created} historical interest entries for loan ${loan.id}`);\n      } catch (interestError) {\n        console.error(\"Error generating historical interest entries:\", interestError);\n        // Don't fail the loan creation if interest generation fails\n      }\n      \n      await storage.createAuditLog({\n        userId,\n        action: \"create_loan\",\n        entityType: \"loan\",\n        entityId: loan.id,\n        changes: { amount: loan.principalAmount, borrowerId: loan.borrowerId },\n        ipAddress: req.ip,\n        userAgent: req.get(\"user-agent\"),\n      });\n\n      broadcastToUser(userId, {\n        type: \"loan_created\",\n        data: loan,\n      });\n\n      res.status(201).json(loan);\n    } catch (error: any) {\n      console.error(\"Error creating loan:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create loan\" });\n    }\n  });\n\n  app.patch(\"/api/loans/:id\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const loan = await storage.updateLoan(req.params.id, userId, req.body);\n      \n      await storage.createAuditLog({\n        userId,\n        action: \"update_loan\",\n        entityType: \"loan\",\n        entityId: loan.id,\n        changes: req.body,\n        ipAddress: req.ip,\n        userAgent: req.get(\"user-agent\"),\n      });\n\n      broadcastToUser(userId, {\n        type: \"loan_updated\",\n        data: loan,\n      });\n\n      res.json(loan);\n    } catch (error: any) {\n      console.error(\"Error updating loan:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update loan\" });\n    }\n  });\n\n  app.delete(\"/api/loans/:id\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      await storage.deleteLoan(req.params.id, userId);\n      \n      await storage.createAuditLog({\n        userId,\n        action: \"delete_loan\",\n        entityType: \"loan\",\n        entityId: req.params.id,\n        ipAddress: req.ip,\n        userAgent: req.get(\"user-agent\"),\n      });\n\n      broadcastToUser(userId, {\n        type: \"loan_deleted\",\n        data: { id: req.params.id },\n      });\n\n      res.status(204).send();\n    } catch (error: any) {\n      console.error(\"Error deleting loan:\", error);\n      res.status(500).json({ message: \"Failed to delete loan\" });\n    }\n  });\n\n  // Payment routes\n  app.get(\"/api/payments\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const loanId = req.query.loanId as string | undefined;\n      const payments = await storage.getPayments(userId, loanId);\n      res.json(payments);\n    } catch (error: any) {\n      console.error(\"Error fetching payments:\", error);\n      res.status(500).json({ message: \"Failed to fetch payments\" });\n    }\n  });\n\n  app.post(\"/api/payments\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validated = insertPaymentSchema.parse({ ...req.body, userId });\n      const payment = await storage.createPayment(validated);\n      \n      await storage.createAuditLog({\n        userId,\n        action: \"add_payment\",\n        entityType: \"payment\",\n        entityId: payment.id,\n        changes: { amount: payment.amount, type: payment.paymentType, loanId: payment.loanId },\n        ipAddress: req.ip,\n        userAgent: req.get(\"user-agent\"),\n      });\n\n      broadcastToUser(userId, {\n        type: \"payment_created\",\n        data: payment,\n        notification: {\n          title: \"Payment Recorded\",\n          message: `Payment of ₹${payment.amount} received`,\n          type: \"payment\",\n        },\n      });\n\n      res.status(201).json(payment);\n    } catch (error: any) {\n      console.error(\"Error creating payment:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create payment\" });\n    }\n  });\n\n  app.patch(\"/api/payments/:id\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const payment = await storage.updatePayment(req.params.id, userId, req.body);\n      \n      await storage.createAuditLog({\n        userId,\n        action: \"update_payment\",\n        entityType: \"payment\",\n        entityId: payment.id,\n        changes: req.body,\n        ipAddress: req.ip,\n        userAgent: req.get(\"user-agent\"),\n      });\n\n      broadcastToUser(userId, {\n        type: \"payment_updated\",\n        data: payment,\n      });\n\n      res.json(payment);\n    } catch (error: any) {\n      console.error(\"Error updating payment:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update payment\" });\n    }\n  });\n\n  app.delete(\"/api/payments/:id\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      await storage.deletePayment(req.params.id, userId);\n      \n      await storage.createAuditLog({\n        userId,\n        action: \"delete_payment\",\n        entityType: \"payment\",\n        entityId: req.params.id,\n        ipAddress: req.ip,\n        userAgent: req.get(\"user-agent\"),\n      });\n\n      broadcastToUser(userId, {\n        type: \"payment_deleted\",\n        data: { id: req.params.id },\n      });\n\n      res.status(204).send();\n    } catch (error: any) {\n      console.error(\"Error deleting payment:\", error);\n      res.status(500).json({ message: \"Failed to delete payment\" });\n    }\n  });\n\n  // Interest Entry routes\n  app.get(\"/api/interest-entries\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const entries = await getUserInterestEntries(userId);\n      res.json(entries);\n    } catch (error: any) {\n      console.error(\"Error fetching interest entries:\", error);\n      res.status(500).json({ message: \"Failed to fetch interest entries\" });\n    }\n  });\n\n  app.get(\"/api/interest-entries/loan/:loanId\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const entries = await getInterestHistory(req.params.loanId);\n      res.json(entries);\n    } catch (error: any) {\n      console.error(\"Error fetching interest history:\", error);\n      res.status(500).json({ message: \"Failed to fetch interest history\" });\n    }\n  });\n\n  app.get(\"/api/interest-entries/loan/:loanId/outstanding\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const outstanding = await calculateOutstandingInterest(req.params.loanId);\n      res.json({ outstandingInterest: outstanding });\n    } catch (error: any) {\n      console.error(\"Error calculating outstanding interest:\", error);\n      res.status(500).json({ message: \"Failed to calculate outstanding interest\" });\n    }\n  });\n\n  // Admin/Job routes for interest calculation and reminders\n  app.post(\"/api/admin/generate-interest\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const result = await generateMonthlyInterestEntries();\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Error generating interest entries:\", error);\n      res.status(500).json({ message: \"Failed to generate interest entries\" });\n    }\n  });\n\n  app.post(\"/api/admin/send-reminders\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const emailsSent = await sendMonthlyInterestReminders();\n      res.json({ emailsSent });\n    } catch (error: any) {\n      console.error(\"Error sending reminders:\", error);\n      res.status(500).json({ message: \"Failed to send reminders\" });\n    }\n  });\n\n  app.get(\"/api/admin/scheduler-status\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const status = getSchedulerStatus();\n      res.json(status);\n    } catch (error: any) {\n      console.error(\"Error getting scheduler status:\", error);\n      res.status(500).json({ message: \"Failed to get scheduler status\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const stats = await storage.getDashboardStats(userId);\n      res.json(stats);\n    } catch (error: any) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Reminder routes\n  app.get(\"/api/reminders\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const borrowerId = req.query.borrowerId as string | undefined;\n      const reminders = await storage.getReminders(userId, borrowerId);\n      res.json(reminders);\n    } catch (error: any) {\n      console.error(\"Error fetching reminders:\", error);\n      res.status(500).json({ message: \"Failed to fetch reminders\" });\n    }\n  });\n\n  app.post(\"/api/reminders\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      // Convert scheduledFor string to Date before validation\n      const body = {\n        ...req.body,\n        userId,\n        scheduledFor: req.body.scheduledFor ? new Date(req.body.scheduledFor) : undefined,\n      };\n      const validated = insertReminderSchema.parse(body);\n      const reminder = await storage.createReminder(validated);\n      \n      await storage.createAuditLog({\n        userId,\n        action: \"create_reminder\",\n        entityType: \"reminder\",\n        entityId: reminder.id,\n        changes: { type: reminder.reminderType, borrowerId: reminder.borrowerId },\n        ipAddress: req.ip,\n        userAgent: req.get(\"user-agent\"),\n      });\n\n      // If sendImmediately is true, process the reminder right away\n      if (req.body.sendImmediately) {\n        await reminderService.processReminder(reminder.id, userId);\n      }\n\n      broadcastToUser(userId, {\n        type: \"reminder_created\",\n        data: reminder,\n      });\n\n      res.status(201).json(reminder);\n    } catch (error: any) {\n      console.error(\"Error creating reminder:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create reminder\" });\n    }\n  });\n\n  app.post(\"/api/reminders/:id/send\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const success = await reminderService.processReminder(req.params.id, userId);\n      \n      if (success) {\n        res.json({ message: \"Reminder sent successfully\" });\n      } else {\n        res.status(400).json({ message: \"Failed to send reminder\" });\n      }\n    } catch (error: any) {\n      console.error(\"Error sending reminder:\", error);\n      res.status(500).json({ message: \"Failed to send reminder\" });\n    }\n  });\n\n  app.post(\"/api/reminders/process-pending\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const count = await reminderService.processPendingReminders(userId);\n      res.json({ message: `Processed ${count} pending reminders`, count });\n    } catch (error: any) {\n      console.error(\"Error processing pending reminders:\", error);\n      res.status(500).json({ message: \"Failed to process pending reminders\" });\n    }\n  });\n\n  // Email template routes\n  app.get(\"/api/email-templates\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const type = req.query.type as string | undefined;\n      const templates = await storage.getEmailTemplates(userId, type);\n      res.json(templates);\n    } catch (error: any) {\n      console.error(\"Error fetching email templates:\", error);\n      res.status(500).json({ message: \"Failed to fetch email templates\" });\n    }\n  });\n\n  app.post(\"/api/email-templates\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validated = insertEmailTemplateSchema.parse({ ...req.body, userId });\n      const template = await storage.createEmailTemplate(validated);\n      res.status(201).json(template);\n    } catch (error: any) {\n      console.error(\"Error creating email template:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create email template\" });\n    }\n  });\n\n  // Email logs\n  app.get(\"/api/email-logs\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const borrowerId = req.query.borrowerId as string | undefined;\n      const logs = await storage.getEmailLogs(userId, borrowerId);\n      res.json(logs);\n    } catch (error: any) {\n      console.error(\"Error fetching email logs:\", error);\n      res.status(500).json({ message: \"Failed to fetch email logs\" });\n    }\n  });\n\n  // Audit logs\n  app.get(\"/api/audit-logs\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = parseInt(req.query.limit as string) || 100;\n      const logs = await storage.getAuditLogs(userId, limit);\n      res.json(logs);\n    } catch (error: any) {\n      console.error(\"Error fetching audit logs:\", error);\n      res.status(500).json({ message: \"Failed to fetch audit logs\" });\n    }\n  });\n\n  // Reports\n  app.get(\"/api/reports/loan-summary\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const loans = await storage.getLoans(userId);\n      const payments = await storage.getPayments(userId);\n      const borrowers = await storage.getBorrowers(userId);\n      const interestEntries = await getUserInterestEntries(userId);\n\n      const report = loans.map(loan => {\n        const borrower = borrowers.find(b => b.id === loan.borrowerId);\n        const loanPayments = payments.filter(p => p.loanId === loan.id);\n        const loanInterest = interestEntries.filter((i: any) => i.loanId === loan.id);\n        const totalPaid = loanPayments.reduce((sum: number, p) => sum + parseFloat(p.amount.toString()), 0);\n        const totalInterest = loanInterest.reduce((sum: number, i: any) => sum + parseFloat(i.amount.toString()), 0);\n        const balance = parseFloat(loan.principalAmount.toString()) + totalInterest - totalPaid;\n\n        return {\n          loanId: loan.id,\n          borrowerName: borrower?.name || 'Unknown',\n          principalAmount: parseFloat(loan.principalAmount.toString()),\n          interestRate: parseFloat(loan.interestRate.toString()),\n          startDate: loan.startDate,\n          dueDate: null,\n          status: loan.status || 'active',\n          totalInterest,\n          totalPaid,\n          balance,\n          paymentCount: loanPayments.length,\n        };\n      });\n\n      res.json(report);\n    } catch (error: any) {\n      console.error(\"Error fetching loan summary report:\", error);\n      res.status(500).json({ message: \"Failed to fetch loan summary report\" });\n    }\n  });\n\n  app.get(\"/api/reports/payment-history\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const payments = await storage.getPayments(userId);\n      res.json(payments);\n    } catch (error: any) {\n      console.error(\"Error fetching payment history report:\", error);\n      res.status(500).json({ message: \"Failed to fetch payment history report\" });\n    }\n  });\n\n  app.get(\"/api/reports/interest-earned\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const interestEntries = await getUserInterestEntries(userId);\n      \n      // Group by month\n      const monthlyData = interestEntries.reduce((acc: Record<string, { month: string; total: number; count: number }>, entry: any) => {\n        const date = new Date(entry.calculatedDate);\n        const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n        if (!acc[monthKey]) {\n          acc[monthKey] = { month: monthKey, total: 0, count: 0 };\n        }\n        acc[monthKey].total += parseFloat(entry.amount.toString());\n        acc[monthKey].count += 1;\n        return acc;\n      }, {} as Record<string, { month: string; total: number; count: number }>);\n\n      const monthlyReport = Object.values(monthlyData).sort((a: any, b: any) => a.month.localeCompare(b.month));\n\n      res.json({\n        total: interestEntries.reduce((sum: number, e: any) => sum + parseFloat(e.amount.toString()), 0),\n        count: interestEntries.length,\n        monthly: monthlyReport,\n      });\n    } catch (error: any) {\n      console.error(\"Error fetching interest earned report:\", error);\n      res.status(500).json({ message: \"Failed to fetch interest earned report\" });\n    }\n  });\n\n  app.get(\"/api/reports/borrower-summary\", isAuthenticated, async (req: any, res: Response) => {\n    try {\n      const userId = req.user.claims.sub;\n      const borrowers = await storage.getBorrowers(userId);\n      const loans = await storage.getLoans(userId);\n      const payments = await storage.getPayments(userId);\n      const interestEntries = await getUserInterestEntries(userId);\n\n      const report = borrowers.map(borrower => {\n        const borrowerLoans = loans.filter(l => l.borrowerId === borrower.id);\n        const totalPrincipal = borrowerLoans.reduce((sum, l) => sum + parseFloat(l.principalAmount.toString()), 0);\n        \n        let totalPaid = 0;\n        let totalInterest = 0;\n        \n        borrowerLoans.forEach(loan => {\n          const loanPayments = payments.filter(p => p.loanId === loan.id);\n          const loanInterest = interestEntries.filter((i: any) => i.loanId === loan.id);\n          totalPaid += loanPayments.reduce((sum: number, p) => sum + parseFloat(p.amount.toString()), 0);\n          totalInterest += loanInterest.reduce((sum: number, i: any) => sum + parseFloat(i.amount.toString()), 0);\n        });\n\n        const balance = totalPrincipal + totalInterest - totalPaid;\n\n        return {\n          borrowerId: borrower.id,\n          borrowerName: borrower.name,\n          email: borrower.email,\n          phone: borrower.phone,\n          loanCount: borrowerLoans.length,\n          totalPrincipal,\n          totalInterest,\n          totalPaid,\n          balance,\n          activeLoans: borrowerLoans.filter(l => l.status === 'active').length,\n        };\n      });\n\n      res.json(report);\n    } catch (error: any) {\n      console.error(\"Error fetching borrower summary report:\", error);\n      res.status(500).json({ message: \"Failed to fetch borrower summary report\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // WebSocket server setup\n  const wss = new WebSocketServer({ server: httpServer, path: \"/ws\" });\n\n  wss.on(\"connection\", (ws: WebSocket, req) => {\n    console.log(\"WebSocket client connected\");\n\n    ws.on(\"message\", (message: string) => {\n      try {\n        const data = JSON.parse(message.toString());\n        \n        if (data.type === \"auth\" && data.userId) {\n          // Register this socket for the user\n          if (!wsClients.has(data.userId)) {\n            wsClients.set(data.userId, new Set());\n          }\n          wsClients.get(data.userId)!.add(ws);\n          \n          ws.send(JSON.stringify({ type: \"auth_success\", message: \"Authenticated\" }));\n        }\n      } catch (error) {\n        console.error(\"WebSocket message error:\", error);\n      }\n    });\n\n    ws.on(\"close\", () => {\n      // Remove this socket from all user sets\n      wsClients.forEach((sockets, userId) => {\n        sockets.delete(ws);\n        if (sockets.size === 0) {\n          wsClients.delete(userId);\n        }\n      });\n      console.log(\"WebSocket client disconnected\");\n    });\n\n    ws.on(\"error\", (error) => {\n      console.error(\"WebSocket error:\", error);\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":28283},"server/db.ts":{"content":"import postgres from 'postgres';\nimport { drizzle } from 'drizzle-orm/postgres-js';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const client = postgres(process.env.DATABASE_URL);\nexport const db = drizzle(client, { schema });\n","size_bytes":365},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"replit.md":{"content":"# LendingPro - Professional Lending Management System\n\n## Overview\nLendingPro is a comprehensive web application designed for professional lending management. It provides tools for tracking loans, borrowers, and payments, offering automated email reminders, analytical dashboards, and comprehensive financial reports. The system aims to streamline lending operations, enhance financial oversight, and improve communication with borrowers. Its core capabilities include secure user authentication, real-time updates, automated interest calculation and reminder systems, and multi-dimensional reporting with data visualization.\n\n## Recent Changes\n\n### UI Improvements - Dark Mode & Header Redesign (October 27, 2025)\n- **Dark Mode Support:** Implemented comprehensive dark mode with ThemeProvider\n  - SSR-safe implementation with proper window guards for non-browser environments\n  - Theme toggle button with localStorage persistence\n  - All components use semantic color tokens that auto-adapt to theme\n  - Smooth transitions between light and dark modes\n- **Header Redesign:** Complete overhaul with modern, professional aesthetic\n  - Gradient logo badge with glassmorphism backdrop blur effect\n  - Professional subtitle \"Professional Lending Management\"\n  - Improved spacing and layout with better visual hierarchy\n  - Integrated theme toggle in header\n- **Functional Notifications:** Real notification system with popover UI\n  - New API endpoint `/api/notifications` (currently returns mock data)\n  - Notification bell with unread count badge\n  - Popover showing notification list with icons and relative timestamps\n  - Three notification types: payment, interest, reminder\n- **Improved Logout Flow:** Fixed to properly clear session and redirect\n  - Uses correct GET `/api/logout` endpoint\n  - Clears React Query cache before redirect\n  - Proper session cleanup via Replit Auth\n\n### Dashboard Enhancements (October 27, 2025)\n- **Interactive Borrower Cards:** Added working buttons for View Details, Add Payment, and Send Reminder on all borrower cards\n- **Enhanced Payment Modal:** Updated Quick Payment feature to include borrower and loan selection dropdowns with proper validation\n- **New Visualizations:** \n  - Loan Status Distribution pie chart showing breakdown of active/settled/overdue loans\n  - Monthly Interest Earned area chart displaying interest trends over the last 6 months\n- **Additional Metrics:** Added three new metric cards displaying:\n  - Average Loan Size across all loans\n  - Average Interest Rate per month\n  - Total Interest Earned from all interest entries\n- **Professional Styling:** All monetary values use monospace font (JetBrains Mono) for perfect alignment per design guidelines\n- **Comprehensive Reports:** Four professional report types with data visualization on Reports page\n\n## User Preferences\nNone specified yet - this is a template project ready for customization.\n\n## System Architecture\nLendingPro is a full-stack web application.\n\n**Frontend:**\n-   **Framework:** React with TypeScript.\n-   **Routing:** Wouter.\n-   **Data Fetching:** TanStack Query (React Query v5).\n-   **UI Library:** Shadcn/UI with Tailwind CSS for a modern, professional look.\n-   **Theme System:** Dark mode support with ThemeProvider, SSR-safe localStorage persistence, seamless light/dark switching.\n-   **Data Visualization:** Recharts for interactive analytics and financial reports (line charts for interest trends, bar charts for borrower comparisons).\n-   **Real-time:** WebSocket client for notifications and live updates.\n-   **Icons:** Lucide React.\n-   **Design System:**\n    -   **Colors:** Primary Blue (#3B82F6), Green for success, Orange for warning, Red for danger. Chart colors are Tailwind-defined. All colors adapt to dark mode via semantic tokens.\n    -   **Typography:** Inter for UI, JetBrains Mono for financial figures.\n    -   **Components:** Follows Shadcn/UI patterns, uses `hover-elevate` and `active-elevate-2` utilities, with `data-testid` attributes for interactive elements. Cards use subtle elevation.\n    -   **Header:** Modern glassmorphism design with gradient logo, backdrop blur, and integrated controls.\n\n**Key Features:**\n-   **Comprehensive Reports:** Four professional report types with data visualization:\n    -   Loan Summary: Complete loan overview with balances, interest, and payment status\n    -   Payment History: Chronological record of all payments received\n    -   Interest Earned: Monthly breakdown with trend visualization\n    -   Borrower Summary: Financial overview by borrower with comparative charts\n-   All monetary values displayed in monospace font for professional alignment\n-   Proper error handling with descriptive messages\n-   Real-time data aggregation and calculations\n\n**Backend:**\n-   **Framework:** Express.js with TypeScript.\n-   **Database:** PostgreSQL (Neon-backed) managed with Drizzle ORM.\n-   **Authentication:** Replit Auth (OpenID Connect) for secure login (Google, GitHub, email/password). Secure session management via PostgreSQL session store.\n-   **Real-time:** WebSocket Server (`ws` package).\n-   **File Uploads:** Multer.\n-   **Session Management:** Passport.js.\n-   **Automated Processes:**\n    -   **Interest Calculation System:** Automatically calculates monthly interest based on loan start date, supporting monthly/annual rates. Tracks historical interest in `interest_entries` table. Generates historical entries for loans with past start dates, handling month-end complexities (e.g., February for Jan 31st loans).\n    -   **Email Reminder Scheduler:** Automated monthly scheduler (1st of month) to generate interest entries, and send HTML email summaries to lenders with active loans.\n-   **API Routes:**\n    -   **Authentication:** `/api/auth/*`, `/api/logout` (GET - Replit Auth logout)\n    -   **CRUD Operations:** `/api/borrowers/*`, `/api/loans/*`, `/api/payments/*`, `/api/reminders/*`, `/api/email-templates/*`.\n    -   **Data Retrieval:** `/api/interest-entries/*`, `/api/email-logs`, `/api/audit-logs`, `/api/dashboard/stats`, `/api/notifications` (mock data).\n    -   **Reports:** `/api/reports/loan-summary`, `/api/reports/payment-history`, `/api/reports/interest-earned`, `/api/reports/borrower-summary`.\n    -   **Admin Triggers:** `/api/admin/generate-interest`, `/api/admin/send-reminders`, `/api/admin/scheduler-status`.\n-   **Database Schema (Drizzle ORM):** Includes `users`, `borrowers`, `loans`, `payments`, `reminders`, `interest_entries`, `email_logs`, `email_templates`, `audit_logs`, and `sessions` tables.\n-   **Security:** All API routes protected with `isAuthenticated` middleware, session-based authentication, SQL injection protection via Drizzle ORM, data isolation, audit logs, and CSRF protection.\n-   **Performance:** TanStack Query for caching, WebSockets for real-time, indexed database columns, and parallel queries.\n-   **Project Structure:** Organized into `client/` (React app), `server/` (Express app), and `shared/` (Drizzle schema, Zod schemas) directories.\n\n## External Dependencies\n-   **PostgreSQL:** Primary database (Neon-backed).\n-   **Replit Auth:** For user authentication (OpenID Connect).\n-   **SendGrid/Resend:** Supported email providers for real email sending (requires environment variables `EMAIL_PROVIDER`, `EMAIL_API_KEY`, `EMAIL_FROM_ADDRESS`). Currently runs in mock mode for development.\n-   **WebSocket:** For real-time communication between server and client.","size_bytes":7436},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/DashboardHeader.tsx":{"content":"import { Bell, Search, Menu, Sun, Moon, LogOut, User, Settings } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface Notification {\n  id: string;\n  title: string;\n  message: string;\n  type: \"payment\" | \"reminder\" | \"interest\" | \"system\";\n  read: boolean;\n  createdAt: string;\n}\n\nexport function DashboardHeader() {\n  const { theme, toggleTheme } = useTheme();\n  const { user } = useAuth();\n\n  const handleLogout = () => {\n    // Clear React Query cache before logout\n    queryClient.clear();\n    // Redirect to logout endpoint which will handle session cleanup\n    window.location.href = \"/api/logout\";\n  };\n\n  // Fetch notifications\n  const { data: notifications = [] } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\"],\n  });\n\n  const unreadCount = notifications.filter((n) => !n.read).length;\n\n  const getNotificationIcon = (type: string) => {\n    const iconClass = \"h-4 w-4\";\n    switch (type) {\n      case \"payment\":\n        return <div className={`${iconClass} rounded-full bg-green-500`} />;\n      case \"reminder\":\n        return <div className={`${iconClass} rounded-full bg-orange-500`} />;\n      case \"interest\":\n        return <div className={`${iconClass} rounded-full bg-blue-500`} />;\n      default:\n        return <div className={`${iconClass} rounded-full bg-gray-500`} />;\n    }\n  };\n\n  const getUserInitials = () => {\n    if (!user) return \"U\";\n    if (user.firstName && user.lastName) {\n      return `${user.firstName[0]}${user.lastName[0]}`.toUpperCase();\n    }\n    if (user.firstName) return user.firstName[0].toUpperCase();\n    return user.email?.[0]?.toUpperCase() || \"U\";\n  };\n\n  const getUserDisplayName = () => {\n    if (!user) return \"User\";\n    if (user.firstName && user.lastName) {\n      return `${user.firstName} ${user.lastName}`;\n    }\n    if (user.firstName) return user.firstName;\n    return user.email || \"User\";\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"flex h-16 items-center gap-4 px-4 md:px-6\">\n        {/* Mobile Menu Button */}\n        <SidebarTrigger className=\"md:hidden\" data-testid=\"button-menu\">\n          <Menu className=\"h-5 w-5\" />\n        </SidebarTrigger>\n\n        {/* Logo */}\n        <div className=\"flex items-center gap-3\">\n          <div className=\"h-9 w-9 rounded-lg bg-gradient-to-br from-primary to-primary/80 flex items-center justify-center shadow-sm\">\n            <span className=\"text-primary-foreground font-bold text-base\">LP</span>\n          </div>\n          <div className=\"hidden md:block\">\n            <h1 className=\"text-lg font-bold text-foreground\">LendingPro</h1>\n            <p className=\"text-xs text-muted-foreground -mt-0.5\">Professional Lending Management</p>\n          </div>\n        </div>\n\n        {/* Search Bar */}\n        <div className=\"flex-1 max-w-md mx-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              type=\"search\"\n              placeholder=\"Search borrowers, loans...\"\n              className=\"pl-9 bg-muted/50 border-muted-foreground/20 focus:bg-background\"\n              data-testid=\"input-search\"\n            />\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex items-center gap-1\">\n          {/* Theme Toggle */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={toggleTheme}\n            className=\"hover-elevate\"\n            data-testid=\"button-theme-toggle\"\n          >\n            {theme === \"light\" ? (\n              <Moon className=\"h-5 w-5\" />\n            ) : (\n              <Sun className=\"h-5 w-5\" />\n            )}\n          </Button>\n\n          {/* Notifications */}\n          <Popover>\n            <PopoverTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"relative hover-elevate\"\n                data-testid=\"button-notifications\"\n              >\n                <Bell className=\"h-5 w-5\" />\n                {unreadCount > 0 && (\n                  <span className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center rounded-full bg-destructive text-destructive-foreground text-xs font-semibold\">\n                    {unreadCount > 9 ? \"9+\" : unreadCount}\n                  </span>\n                )}\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-80 p-0\" align=\"end\" data-testid=\"popover-notifications\">\n              <div className=\"flex items-center justify-between p-4 border-b\">\n                <h3 className=\"font-semibold text-sm\">Notifications</h3>\n                {unreadCount > 0 && (\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    {unreadCount} new\n                  </Badge>\n                )}\n              </div>\n              <ScrollArea className=\"h-80\">\n                {notifications.length === 0 ? (\n                  <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n                    <Bell className=\"h-12 w-12 text-muted-foreground/40 mb-3\" />\n                    <p className=\"text-sm text-muted-foreground\">No notifications yet</p>\n                  </div>\n                ) : (\n                  <div className=\"divide-y\">\n                    {notifications.map((notification) => (\n                      <div\n                        key={notification.id}\n                        className={`p-4 hover-elevate cursor-pointer transition-colors ${\n                          !notification.read ? \"bg-muted/30\" : \"\"\n                        }`}\n                        data-testid={`notification-${notification.id}`}\n                      >\n                        <div className=\"flex gap-3\">\n                          {getNotificationIcon(notification.type)}\n                          <div className=\"flex-1 space-y-1\">\n                            <div className=\"flex items-start justify-between gap-2\">\n                              <p className=\"text-sm font-medium leading-none\">\n                                {notification.title}\n                              </p>\n                              {!notification.read && (\n                                <div className=\"h-2 w-2 rounded-full bg-primary flex-shrink-0 mt-1\" />\n                              )}\n                            </div>\n                            <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                              {notification.message}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground/70\">\n                              {formatDistanceToNow(new Date(notification.createdAt), { addSuffix: true })}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </ScrollArea>\n            </PopoverContent>\n          </Popover>\n\n          {/* User Menu */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                className=\"relative h-9 w-9 rounded-full hover-elevate\"\n                data-testid=\"button-user-menu\"\n              >\n                <Avatar className=\"h-9 w-9 border-2 border-border\">\n                  <AvatarImage src={user?.profileImageUrl || undefined} alt={getUserDisplayName()} />\n                  <AvatarFallback className=\"bg-primary/10 text-primary font-semibold\">\n                    {getUserInitials()}\n                  </AvatarFallback>\n                </Avatar>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-56\">\n              <DropdownMenuLabel>\n                <div className=\"flex flex-col gap-1\">\n                  <p className=\"text-sm font-medium\">{getUserDisplayName()}</p>\n                  <p className=\"text-xs text-muted-foreground\">{user?.email}</p>\n                </div>\n              </DropdownMenuLabel>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem data-testid=\"menu-profile\">\n                <User className=\"mr-2 h-4 w-4\" />\n                Profile Settings\n              </DropdownMenuItem>\n              <DropdownMenuItem data-testid=\"menu-preferences\">\n                <Settings className=\"mr-2 h-4 w-4\" />\n                Preferences\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem onClick={handleLogout} className=\"text-destructive focus:text-destructive\" data-testid=\"menu-logout\">\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                Logout\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":9811},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/pages/Dashboard.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { LucideIndianRupee, TrendingUp, Users, Banknote, Plus, UserPlus, PieChart as PieChartIcon } from \"lucide-react\";\nimport { SummaryCard } from \"@/components/SummaryCard\";\nimport { BorrowerCard } from \"@/components/BorrowerCard\";\nimport { InterestChart } from \"@/components/InterestChart\";\nimport { ActivityFeed } from \"@/components/ActivityFeed\";\nimport { AddPaymentModal } from \"@/components/AddPaymentModal\";\nimport { AddBorrowerModal } from \"@/components/AddBorrowerModal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip, AreaChart, Area, XAxis, YAxis, CartesianGrid } from \"recharts\";\nimport type { Borrower, Loan, Payment, InterestEntry } from \"@shared/schema\";\nimport avatar1 from '@assets/generated_images/Professional_male_avatar_headshot_3c69c06f.png';\nimport avatar2 from '@assets/generated_images/Professional_female_avatar_headshot_d7c69081.png';\nimport avatar3 from '@assets/generated_images/Professional_diverse_avatar_headshot_7572a5aa.png';\n\ninterface DashboardStats {\n  totalLent: string;\n  totalOutstanding: string;\n  totalPendingInterest: string;\n  activeBorrowers: number;\n}\n\nexport default function Dashboard() {\n  const [paymentModalOpen, setPaymentModalOpen] = useState(false);\n  const [borrowerModalOpen, setBorrowerModalOpen] = useState(false);\n  const [selectedBorrowerId, setSelectedBorrowerId] = useState<string | null>(null);\n\n  // Fetch dashboard stats\n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: ['/api/dashboard/stats'],\n  });\n\n  // Fetch borrowers\n  const { data: borrowers = [], isLoading: borrowersLoading } = useQuery<Borrower[]>({\n    queryKey: ['/api/borrowers'],\n  });\n\n  // Fetch all loans\n  const { data: loans = [] } = useQuery<Loan[]>({\n    queryKey: ['/api/loans'],\n  });\n\n  // Fetch all payments\n  const { data: payments = [] } = useQuery<Payment[]>({\n    queryKey: ['/api/payments'],\n  });\n\n  // Fetch interest entries\n  const { data: interestEntries = [] } = useQuery<InterestEntry[]>({\n    queryKey: ['/api/interest-entries'],\n  });\n\n  // Generate dynamic chart data from last 6 months of payments\n  const chartData = useMemo(() => {\n    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const months: { [key: string]: { received: number; pending: number } } = {};\n    \n    // Initialize last 6 months\n    const today = new Date();\n    for (let i = 5; i >= 0; i--) {\n      const date = new Date(today.getFullYear(), today.getMonth() - i, 1);\n      const key = `${monthNames[date.getMonth()]}`;\n      months[key] = { received: 0, pending: 0 };\n    }\n\n    // Aggregate payments by month\n    payments.forEach(payment => {\n      const paymentDate = new Date(payment.paymentDate);\n      const monthKey = monthNames[paymentDate.getMonth()];\n      if (months[monthKey]) {\n        months[monthKey].received += parseFloat(payment.amount);\n      }\n    });\n\n    // Calculate pending interest (simplified - from outstanding principal)\n    const totalOutstanding = parseFloat(stats?.totalOutstanding || '0');\n    const monthlyPending = totalOutstanding * 0.01; // Approximate 1% monthly\n    \n    return Object.entries(months).map(([month, data]) => ({\n      month,\n      received: Math.round(data.received),\n      pending: Math.round(monthlyPending),\n    }));\n  }, [payments, stats]);\n\n  // Generate dynamic activity feed from recent payments and loans\n  const activities = useMemo(() => {\n    const allActivities: Array<{\n      id: string;\n      type: 'payment' | 'alert' | 'reminder' | 'system';\n      title: string;\n      description: string;\n      amount?: string;\n      timestamp: string;\n    }> = [];\n\n    // Add recent payments\n    const sortedPayments = [...payments]\n      .sort((a, b) => new Date(b.paymentDate).getTime() - new Date(a.paymentDate).getTime())\n      .slice(0, 5);\n\n    sortedPayments.forEach(payment => {\n      const loan = loans.find(l => l.id === payment.loanId);\n      const borrower = borrowers.find(b => b.id === loan?.borrowerId);\n      \n      const timeAgo = getTimeAgo(new Date(payment.paymentDate));\n      \n      allActivities.push({\n        id: payment.id,\n        type: 'payment',\n        title: `Payment Received - ${borrower?.name || 'Unknown'}`,\n        description: `${payment.paymentType} payment via ${payment.paymentMethod}`,\n        amount: `₹${parseFloat(payment.amount).toLocaleString('en-IN')}`,\n        timestamp: timeAgo,\n      });\n    });\n\n    // Add recent loans\n    const sortedLoans = [...loans]\n      .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime())\n      .slice(0, 3);\n\n    sortedLoans.forEach(loan => {\n      const borrower = borrowers.find(b => b.id === loan.borrowerId);\n      const createdDate = loan.createdAt ? new Date(loan.createdAt) : new Date();\n      const timeAgo = getTimeAgo(createdDate);\n      \n      allActivities.push({\n        id: loan.id,\n        type: 'system',\n        title: `New Loan Created - ${borrower?.name || 'Unknown'}`,\n        description: `Principal amount at ${loan.interestRate}% interest`,\n        amount: `₹${parseFloat(loan.principalAmount).toLocaleString('en-IN')}`,\n        timestamp: timeAgo,\n      });\n    });\n\n    // Sort all activities by most recent\n    return allActivities\n      .sort((a, b) => {\n        const timeA = parseTimeAgo(a.timestamp);\n        const timeB = parseTimeAgo(b.timestamp);\n        return timeA - timeB;\n      })\n      .slice(0, 8);\n  }, [payments, loans, borrowers]);\n\n  // Calculate loan status distribution for pie chart\n  const loanStatusData = useMemo(() => {\n    const statusCounts = loans.reduce((acc, loan) => {\n      const status = loan.status || 'active';\n      acc[status] = (acc[status] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return Object.entries(statusCounts).map(([status, count]) => ({\n      name: status.charAt(0).toUpperCase() + status.slice(1),\n      value: count,\n      color: status === 'active' ? '#3B82F6' : status === 'settled' ? '#10B981' : '#EF4444',\n    }));\n  }, [loans]);\n\n  // Calculate monthly interest earned for area chart\n  const monthlyInterestData = useMemo(() => {\n    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const months: { [key: string]: number } = {};\n    \n    // Initialize last 6 months\n    const today = new Date();\n    for (let i = 5; i >= 0; i--) {\n      const date = new Date(today.getFullYear(), today.getMonth() - i, 1);\n      const key = `${monthNames[date.getMonth()]}`;\n      months[key] = 0;\n    }\n\n    // Aggregate interest entries by month\n    interestEntries.forEach(entry => {\n      const entryDate = new Date(entry.periodEnd);\n      const monthKey = monthNames[entryDate.getMonth()];\n      if (months[monthKey] !== undefined) {\n        months[monthKey] += parseFloat(entry.interestAmount);\n      }\n    });\n\n    return Object.entries(months).map(([month, amount]) => ({\n      month,\n      interest: Math.round(amount),\n    }));\n  }, [interestEntries]);\n\n  // Calculate additional metrics\n  const additionalMetrics = useMemo(() => {\n    const totalLoans = loans.length;\n    const avgLoanSize = totalLoans > 0 \n      ? loans.reduce((sum, loan) => sum + parseFloat(loan.principalAmount), 0) / totalLoans \n      : 0;\n    \n    const avgInterestRate = totalLoans > 0\n      ? loans.reduce((sum, loan) => sum + parseFloat(loan.interestRate), 0) / totalLoans\n      : 0;\n    \n    const totalInterestEarned = interestEntries.reduce((sum, entry) => sum + parseFloat(entry.interestAmount), 0);\n    \n    return {\n      avgLoanSize,\n      avgInterestRate,\n      totalInterestEarned,\n    };\n  }, [loans, interestEntries]);\n\n  const formatCurrency = (value: string | number) => {\n    const num = typeof value === 'string' ? parseFloat(value) : value;\n    return `₹${(num / 100000).toFixed(1)}L`;\n  };\n\n  const handleViewDetails = (borrowerId: string) => {\n    // Navigate to borrower details page\n    window.location.href = `/borrowers?id=${borrowerId}`;\n  };\n\n  const handleAddPayment = (borrowerId: string) => {\n    setSelectedBorrowerId(borrowerId);\n    setPaymentModalOpen(true);\n  };\n\n  const handleSendReminder = (borrowerId: string) => {\n    // Navigate to reminders page with borrower pre-selected\n    window.location.href = `/reminders?borrowerId=${borrowerId}`;\n  };\n\n  const handleQuickPayment = () => {\n    setSelectedBorrowerId(null); // No pre-selected borrower\n    setPaymentModalOpen(true);\n  };\n\n  const avatars = [avatar1, avatar2, avatar3];\n\n  return (\n    <div className=\"p-8 space-y-8\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Dashboard</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Overview of your lending portfolio\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button onClick={() => setBorrowerModalOpen(true)} data-testid=\"button-add-borrower\">\n            <UserPlus className=\"h-4 w-4 mr-2\" />\n            Add Borrower\n          </Button>\n          <Button variant=\"outline\" onClick={handleQuickPayment} data-testid=\"button-quick-payment\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Quick Payment\n          </Button>\n        </div>\n      </div>\n\n      {statsLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6\">\n          {[1, 2, 3, 4].map((i) => (\n            <Skeleton key={i} className=\"h-32\" data-testid={`skeleton-card-${i}`} />\n          ))}\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6\">\n          <SummaryCard\n            title=\"Total Amount Lent\"\n            value={stats?.totalLent || \"₹0\"}\n            subValue=\"All time\"\n            icon={LucideIndianRupee}\n            iconColor=\"bg-blue-500\"\n            data-testid=\"card-total-lent\"\n          />\n          <SummaryCard\n            title=\"Outstanding Principal\"\n            value={stats?.totalOutstanding || \"₹0\"}\n            icon={Banknote}\n            iconColor=\"bg-orange-500\"\n            data-testid=\"card-outstanding\"\n          />\n          <SummaryCard\n            title=\"Pending Interest\"\n            value={stats?.totalPendingInterest || \"₹0\"}\n            icon={TrendingUp}\n            iconColor=\"bg-green-500\"\n            data-testid=\"card-pending-interest\"\n          />\n          <SummaryCard\n            title=\"Active Borrowers\"\n            value={String(stats?.activeBorrowers || 0)}\n            subValue={`${borrowers.length} total`}\n            icon={Users}\n            iconColor=\"bg-purple-500\"\n            data-testid=\"card-active-borrowers\"\n          />\n        </div>\n      )}\n\n      {/* Additional Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Average Loan Size</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold font-mono\" data-testid=\"text-avg-loan-size\">\n              ₹{additionalMetrics.avgLoanSize.toLocaleString('en-IN', { maximumFractionDigits: 0 })}\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Across {loans.length} loans\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Average Interest Rate</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold font-mono\" data-testid=\"text-avg-interest-rate\">\n              {additionalMetrics.avgInterestRate.toFixed(2)}%\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Per month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Total Interest Earned</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold font-mono text-green-600\" data-testid=\"text-total-interest-earned\">\n              ₹{additionalMetrics.totalInterestEarned.toLocaleString('en-IN', { maximumFractionDigits: 0 })}\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {interestEntries.length} interest entries\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {borrowersLoading ? (\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <Skeleton className=\"lg:col-span-2 h-96\" />\n          <Skeleton className=\"h-96\" />\n        </div>\n      ) : borrowers.length === 0 ? (\n        <div className=\"p-12 text-center border rounded-lg\">\n          <Users className=\"h-16 w-16 mx-auto mb-4 opacity-50 text-muted-foreground\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No Borrowers Yet</h3>\n          <p className=\"text-muted-foreground mb-4\">Get started by adding your first borrower</p>\n          <Button onClick={() => setBorrowerModalOpen(true)}>\n            <UserPlus className=\"h-4 w-4 mr-2\" />\n            Add Your First Borrower\n          </Button>\n        </div>\n      ) : (\n        <>\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <div className=\"lg:col-span-2\">\n              <InterestChart\n                title=\"Payment Trends (Last 6 Months)\"\n                data={chartData}\n                onExport={() => console.log('Export chart')}\n              />\n            </div>\n            <ActivityFeed activities={activities} />\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <PieChartIcon className=\"h-5 w-5\" />\n                  Loan Status Distribution\n                </CardTitle>\n                <CardDescription>Breakdown of loans by status</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {loanStatusData.length === 0 ? (\n                  <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                    No loan data available\n                  </div>\n                ) : (\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <PieChart>\n                      <Pie\n                        data={loanStatusData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        label={({ name, value, percent }) => `${name}: ${value} (${(percent * 100).toFixed(0)}%)`}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                      >\n                        {loanStatusData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                      <Legend />\n                    </PieChart>\n                  </ResponsiveContainer>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5\" />\n                  Monthly Interest Earned\n                </CardTitle>\n                <CardDescription>Interest accumulated over the last 6 months</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {monthlyInterestData.every(d => d.interest === 0) ? (\n                  <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                    No interest data available\n                  </div>\n                ) : (\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <AreaChart data={monthlyInterestData}>\n                      <defs>\n                        <linearGradient id=\"colorInterest\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                          <stop offset=\"5%\" stopColor=\"#10B981\" stopOpacity={0.8}/>\n                          <stop offset=\"95%\" stopColor=\"#10B981\" stopOpacity={0}/>\n                        </linearGradient>\n                      </defs>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"month\" />\n                      <YAxis />\n                      <Tooltip \n                        formatter={(value: number) => [`₹${value.toLocaleString()}`, 'Interest']}\n                      />\n                      <Area \n                        type=\"monotone\" \n                        dataKey=\"interest\" \n                        stroke=\"#10B981\" \n                        fillOpacity={1} \n                        fill=\"url(#colorInterest)\" \n                      />\n                    </AreaChart>\n                  </ResponsiveContainer>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          <div>\n            <Tabs defaultValue=\"all\" className=\"w-full\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h2 className=\"text-xl font-semibold\">Borrowers</h2>\n                <TabsList>\n                  <TabsTrigger value=\"all\" data-testid=\"tab-all\">All ({borrowers.length})</TabsTrigger>\n                  <TabsTrigger value=\"active\" data-testid=\"tab-active\">\n                    Active ({borrowers.filter((b) => b.status === 'active').length})\n                  </TabsTrigger>\n                  <TabsTrigger value=\"overdue\" data-testid=\"tab-overdue\">\n                    Overdue ({borrowers.filter((b) => b.status === 'overdue').length})\n                  </TabsTrigger>\n                  <TabsTrigger value=\"settled\" data-testid=\"tab-settled\">\n                    Settled ({borrowers.filter((b) => b.status === 'settled').length})\n                  </TabsTrigger>\n                </TabsList>\n              </div>\n\n              {['all', 'active', 'overdue', 'settled'].map((tab) => (\n                <TabsContent key={tab} value={tab} className=\"mt-0\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    {borrowers\n                      .filter((b) => tab === 'all' || b.status === tab)\n                      .map((borrower, index) => {\n                        const borrowerLoans = loans.filter((l) => l.borrowerId === borrower.id);\n                        const borrowerPayments = payments.filter((p) => \n                          borrowerLoans.some((l) => l.id === p.loanId)\n                        );\n                        \n                        const totalLent = borrowerLoans.reduce((sum, loan) => sum + parseFloat(loan.principalAmount), 0);\n                        const totalPaid = borrowerPayments.reduce((sum, payment) => sum + parseFloat(payment.amount), 0);\n                        const outstanding = totalLent - totalPaid;\n                        \n                        const lastPayment = borrowerPayments.sort((a, b) => \n                          new Date(b.paymentDate).getTime() - new Date(a.paymentDate).getTime()\n                        )[0];\n                        \n                        return (\n                          <BorrowerCard\n                            key={borrower.id}\n                            id={borrower.id}\n                            name={borrower.name}\n                            email={borrower.email}\n                            phone={borrower.phone}\n                            avatar={avatars[index % 3]}\n                            totalLent={formatCurrency(totalLent)}\n                            outstanding={formatCurrency(outstanding)}\n                            pendingInterest=\"₹0\"\n                            lastPayment={lastPayment ? {\n                              date: new Date(lastPayment.paymentDate).toISOString().split('T')[0],\n                              amount: `₹${parseFloat(lastPayment.amount).toLocaleString('en-IN')}`\n                            } : undefined}\n                            daysSincePayment={lastPayment ? \n                              Math.floor((Date.now() - new Date(lastPayment.paymentDate).getTime()) / (1000 * 60 * 60 * 24))\n                              : 0}\n                            status={borrower.status as 'active' | 'overdue' | 'settled'}\n                            onViewDetails={handleViewDetails}\n                            onAddPayment={handleAddPayment}\n                            onSendReminder={handleSendReminder}\n                          />\n                        );\n                      })}\n                    {borrowers.filter((b) => tab === 'all' || b.status === tab).length === 0 && (\n                      <div className=\"col-span-2 p-12 text-center text-muted-foreground\">\n                        <Users className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n                        <p>No {tab === 'all' ? '' : tab} borrowers</p>\n                      </div>\n                    )}\n                  </div>\n                </TabsContent>\n              ))}\n            </Tabs>\n          </div>\n        </>\n      )}\n\n      <AddPaymentModal \n        open={paymentModalOpen} \n        onClose={() => {\n          setPaymentModalOpen(false);\n          setSelectedBorrowerId(null);\n        }}\n        preSelectedBorrowerId={selectedBorrowerId}\n      />\n      <AddBorrowerModal open={borrowerModalOpen} onClose={() => setBorrowerModalOpen(false)} />\n    </div>\n  );\n}\n\n// Helper function to calculate time ago\nfunction getTimeAgo(date: Date): string {\n  const seconds = Math.floor((Date.now() - date.getTime()) / 1000);\n  \n  if (seconds < 60) return 'Just now';\n  if (seconds < 3600) return `${Math.floor(seconds / 60)} minutes ago`;\n  if (seconds < 86400) return `${Math.floor(seconds / 3600)} hours ago`;\n  if (seconds < 604800) return `${Math.floor(seconds / 86400)} days ago`;\n  if (seconds < 2592000) return `${Math.floor(seconds / 604800)} weeks ago`;\n  return `${Math.floor(seconds / 2592000)} months ago`;\n}\n\n// Helper function to parse time ago string to seconds for sorting\nfunction parseTimeAgo(timeAgo: string): number {\n  if (timeAgo === 'Just now') return 0;\n  const match = timeAgo.match(/(\\d+)\\s+(\\w+)/);\n  if (!match) return 0;\n  \n  const value = parseInt(match[1]);\n  const unit = match[2];\n  \n  if (unit.startsWith('minute')) return value * 60;\n  if (unit.startsWith('hour')) return value * 3600;\n  if (unit.startsWith('day')) return value * 86400;\n  if (unit.startsWith('week')) return value * 604800;\n  if (unit.startsWith('month')) return value * 2592000;\n  return 0;\n}\n","size_bytes":23211},"client/src/components/InterestChart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download } from \"lucide-react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\ninterface InterestChartProps {\n  title: string;\n  data: Array<{\n    month: string;\n    received: number;\n    pending: number;\n  }>;\n  onExport?: () => void;\n}\n\nexport function InterestChart({ title, data, onExport }: InterestChartProps) {\n  return (\n    <Card data-testid=\"card-interest-chart\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">{title}</CardTitle>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"flex items-center gap-2 text-xs\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-8 text-xs\"\n                data-testid=\"button-timerange-1m\"\n              >\n                1M\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-8 text-xs\"\n                data-testid=\"button-timerange-3m\"\n              >\n                3M\n              </Button>\n              <Button\n                variant=\"default\"\n                size=\"sm\"\n                className=\"h-8 text-xs\"\n                data-testid=\"button-timerange-6m\"\n              >\n                6M\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-8 text-xs\"\n                data-testid=\"button-timerange-1y\"\n              >\n                1Y\n              </Button>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onExport}\n              data-testid=\"button-export-chart\"\n            >\n              <Download className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <LineChart data={data}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n            <XAxis\n              dataKey=\"month\"\n              stroke=\"hsl(var(--muted-foreground))\"\n              fontSize={12}\n              tickLine={false}\n            />\n            <YAxis\n              stroke=\"hsl(var(--muted-foreground))\"\n              fontSize={12}\n              tickLine={false}\n              tickFormatter={(value) => `₹${(value / 100000).toFixed(1)}L`}\n            />\n            <Tooltip\n              contentStyle={{\n                backgroundColor: \"hsl(var(--popover))\",\n                border: \"1px solid hsl(var(--border))\",\n                borderRadius: \"0.375rem\",\n              }}\n              formatter={(value: number) => [`₹${value.toLocaleString()}`, \"\"]}\n            />\n            <Legend />\n            <Line\n              type=\"monotone\"\n              dataKey=\"received\"\n              stroke=\"hsl(var(--chart-2))\"\n              strokeWidth={2}\n              name=\"Interest Received\"\n              dot={{ fill: \"hsl(var(--chart-2))\", r: 4 }}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"pending\"\n              stroke=\"hsl(var(--chart-4))\"\n              strokeWidth={2}\n              name=\"Interest Pending\"\n              dot={{ fill: \"hsl(var(--chart-4))\", r: 4 }}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3646},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(claims: any) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env.REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4210},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/examples/DashboardHeader.tsx":{"content":"import { DashboardHeader } from '../DashboardHeader';\n\nexport default function DashboardHeaderExample() {\n  return (\n    <DashboardHeader \n      onMenuClick={() => console.log('Menu clicked')}\n      onThemeToggle={() => console.log('Theme toggled')}\n    />\n  );\n}\n","size_bytes":264},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { LucideIndianRupee, TrendingUp, Bell, Mail, BarChart3, Shield } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"border-b\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"h-8 w-8 rounded-md bg-primary flex items-center justify-center\">\n              <span className=\"text-primary-foreground font-bold text-sm\">LP</span>\n            </div>\n            <h1 className=\"text-xl font-bold\">LendingPro</h1>\n          </div>\n          <Button asChild data-testid=\"button-login\">\n            <a href=\"/api/login\">Log In</a>\n          </Button>\n        </div>\n      </header>\n\n      <main>\n        <section className=\"max-w-7xl mx-auto px-6 py-20 text-center\">\n          <h2 className=\"text-5xl font-bold mb-6\">\n            Professional Lending Management\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-3xl mx-auto\">\n            Track loans, automate reminders, and manage borrowers with real-time notifications\n            and comprehensive reporting - all in one powerful platform.\n          </p>\n          <Button size=\"lg\" className=\"text-lg px-8\" asChild data-testid=\"button-get-started\">\n            <a href=\"/api/login\">Get Started</a>\n          </Button>\n        </section>\n\n        <section className=\"max-w-7xl mx-auto px-6 py-16\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            <Card>\n              <CardContent className=\"p-6 flex flex-col items-center text-center\">\n                <div className=\"h-12 w-12 rounded-full bg-blue-500 flex items-center justify-center mb-4\">\n                  <LucideIndianRupee className=\"h-6 w-6 text-white\" />\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">Complete Loan Tracking</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Manage multiple loans per borrower with flexible payment recording and automatic interest calculations.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6 flex flex-col items-center text-center\">\n                <div className=\"h-12 w-12 rounded-full bg-green-500 flex items-center justify-center mb-4\">\n                  <TrendingUp className=\"h-6 w-6 text-white\" />\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">Real-Time Analytics</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Interactive dashboards with live updates showing outstanding amounts, interest trends, and portfolio health.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6 flex flex-col items-center text-center\">\n                <div className=\"h-12 w-12 rounded-full bg-purple-500 flex items-center justify-center mb-4\">\n                  <Bell className=\"h-6 w-6 text-white\" />\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">Smart Notifications</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Get instant alerts for payments, high pending interest, and overdue loans via real-time WebSocket updates.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6 flex flex-col items-center text-center\">\n                <div className=\"h-12 w-12 rounded-full bg-orange-500 flex items-center justify-center mb-4\">\n                  <Mail className=\"h-6 w-6 text-white\" />\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">Automated Email Reminders</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Customizable email templates with scheduled reminders for payment due dates and interest alerts.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6 flex flex-col items-center text-center\">\n                <div className=\"h-12 w-12 rounded-full bg-red-500 flex items-center justify-center mb-4\">\n                  <BarChart3 className=\"h-6 w-6 text-white\" />\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">Comprehensive Reports</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Generate borrower statements, tax reports, and portfolio analytics with PDF and Excel export options.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6 flex flex-col items-center text-center\">\n                <div className=\"h-12 w-12 rounded-full bg-indigo-500 flex items-center justify-center mb-4\">\n                  <Shield className=\"h-6 w-6 text-white\" />\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">Secure & Private</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Bank-level security with data encryption, audit logs, and complete isolation between user accounts.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </section>\n\n        <section className=\"max-w-4xl mx-auto px-6 py-16 text-center\">\n          <h3 className=\"text-3xl font-bold mb-4\">Ready to streamline your lending business?</h3>\n          <p className=\"text-lg text-muted-foreground mb-8\">\n            Start managing loans professionally with automated tracking and reminders.\n          </p>\n          <Button size=\"lg\" className=\"text-lg px-8\" asChild data-testid=\"button-cta\">\n            <a href=\"/api/login\">Start Free</a>\n          </Button>\n        </section>\n      </main>\n\n      <footer className=\"border-t mt-16\">\n        <div className=\"max-w-7xl mx-auto px-6 py-8 text-center text-sm text-muted-foreground\">\n          <p>&copy; 2024 LendingPro. Professional lending management platform.</p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":6300},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/pages/Reports.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { LucideIndianRupee, TrendingUp, Users, FileText } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ntype LoanSummaryItem = {\n  loanId: string;\n  borrowerName: string;\n  principalAmount: number;\n  interestRate: number;\n  startDate: string;\n  dueDate: string;\n  status: string;\n  totalInterest: number;\n  totalPaid: number;\n  balance: number;\n  paymentCount: number;\n};\n\ntype PaymentHistoryItem = {\n  id: string;\n  loanId: string;\n  amount: string;\n  paymentDate: string;\n  paymentMethod: string;\n  notes: string;\n  borrowerName: string;\n};\n\ntype InterestEarnedReport = {\n  total: number;\n  count: number;\n  monthly: Array<{ month: string; total: number; count: number }>;\n};\n\ntype BorrowerSummaryItem = {\n  borrowerId: string;\n  borrowerName: string;\n  email: string;\n  phone: string;\n  loanCount: number;\n  totalPrincipal: number;\n  totalInterest: number;\n  totalPaid: number;\n  balance: number;\n  activeLoans: number;\n};\n\nexport default function Reports() {\n  const { data: loanSummary = [], isLoading: isLoadingLoans, error: loansError } = useQuery<LoanSummaryItem[]>({\n    queryKey: [\"/api/reports/loan-summary\"],\n  });\n\n  const { data: paymentHistory = [], isLoading: isLoadingPayments, error: paymentsError } = useQuery<PaymentHistoryItem[]>({\n    queryKey: [\"/api/reports/payment-history\"],\n  });\n\n  const { data: interestEarned, isLoading: isLoadingInterest, error: interestError } = useQuery<InterestEarnedReport>({\n    queryKey: [\"/api/reports/interest-earned\"],\n  });\n\n  const { data: borrowerSummary = [], isLoading: isLoadingBorrowers, error: borrowersError } = useQuery<BorrowerSummaryItem[]>({\n    queryKey: [\"/api/reports/borrower-summary\"],\n  });\n\n  const formatCurrency = (amount: number | string) => {\n    const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(num);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, string> = {\n      active: \"bg-green-500/10 text-green-600\",\n      paid: \"bg-blue-500/10 text-blue-600\",\n      defaulted: \"bg-red-500/10 text-red-600\",\n    };\n    return (\n      <Badge className={`${variants[status] || \"\"} hover-elevate`} data-testid={`badge-status-${status}`}>\n        {status}\n      </Badge>\n    );\n  };\n\n  const totalLoaned = loanSummary.reduce((sum, loan) => sum + loan.principalAmount, 0);\n  const totalInterestEarned = interestEarned?.total || 0;\n  const totalReceived = loanSummary.reduce((sum, loan) => sum + loan.totalPaid, 0);\n  const totalOutstanding = loanSummary.reduce((sum, loan) => sum + loan.balance, 0);\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-semibold\" data-testid=\"heading-reports\">\n          Reports\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Comprehensive financial reports and analytics\n        </p>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Loaned</CardTitle>\n            <LucideIndianRupee className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-semibold font-mono\" data-testid=\"text-total-loaned\">\n              {formatCurrency(totalLoaned)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {loanSummary.length} loans\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Interest Earned</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-semibold font-mono\" data-testid=\"text-interest-earned\">\n              {formatCurrency(totalInterestEarned)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {interestEarned?.count || 0} entries\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Received</CardTitle>\n            <LucideIndianRupee className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-semibold font-mono\" data-testid=\"text-total-received\">\n              {formatCurrency(totalReceived)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {paymentHistory.length} payments\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Outstanding</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-semibold font-mono\" data-testid=\"text-total-outstanding\">\n              {formatCurrency(totalOutstanding)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              To be collected\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"loans\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"loans\" data-testid=\"tab-loans\">Loan Summary</TabsTrigger>\n          <TabsTrigger value=\"payments\" data-testid=\"tab-payments\">Payment History</TabsTrigger>\n          <TabsTrigger value=\"interest\" data-testid=\"tab-interest\">Interest Earned</TabsTrigger>\n          <TabsTrigger value=\"borrowers\" data-testid=\"tab-borrowers\">Borrower Summary</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"loans\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Loan Summary Report</CardTitle>\n              <CardDescription>Overview of all loans with balances and payment status</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {loansError ? (\n                <div className=\"text-center py-8 text-destructive\" data-testid=\"error-loans\">\n                  Failed to load loan data. Please try refreshing the page.\n                </div>\n              ) : isLoadingLoans ? (\n                <div className=\"text-center py-8 text-muted-foreground\">Loading...</div>\n              ) : loanSummary.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">No loans found</div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Borrower</TableHead>\n                      <TableHead>Principal</TableHead>\n                      <TableHead>Interest Rate</TableHead>\n                      <TableHead>Interest Earned</TableHead>\n                      <TableHead>Paid</TableHead>\n                      <TableHead>Balance</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Due Date</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {loanSummary.map((loan) => (\n                      <TableRow key={loan.loanId} data-testid={`row-loan-${loan.loanId}`}>\n                        <TableCell className=\"font-medium\">{loan.borrowerName}</TableCell>\n                        <TableCell className=\"font-mono\">{formatCurrency(loan.principalAmount)}</TableCell>\n                        <TableCell className=\"font-mono\">{loan.interestRate}%</TableCell>\n                        <TableCell className=\"font-mono\">{formatCurrency(loan.totalInterest)}</TableCell>\n                        <TableCell className=\"font-mono\">{formatCurrency(loan.totalPaid)}</TableCell>\n                        <TableCell className=\"font-semibold font-mono\">{formatCurrency(loan.balance)}</TableCell>\n                        <TableCell>{getStatusBadge(loan.status)}</TableCell>\n                        <TableCell>{loan.dueDate ? format(new Date(loan.dueDate), 'MMM d, yyyy') : 'N/A'}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"payments\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Payment History Report</CardTitle>\n              <CardDescription>Complete record of all payments received</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {paymentsError ? (\n                <div className=\"text-center py-8 text-destructive\" data-testid=\"error-payments\">\n                  Failed to load payment data. Please try refreshing the page.\n                </div>\n              ) : isLoadingPayments ? (\n                <div className=\"text-center py-8 text-muted-foreground\">Loading...</div>\n              ) : paymentHistory.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">No payments found</div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Date</TableHead>\n                      <TableHead>Borrower</TableHead>\n                      <TableHead>Amount</TableHead>\n                      <TableHead>Method</TableHead>\n                      <TableHead>Notes</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paymentHistory.map((payment) => (\n                      <TableRow key={payment.id} data-testid={`row-payment-${payment.id}`}>\n                        <TableCell>{format(new Date(payment.paymentDate), 'MMM d, yyyy')}</TableCell>\n                        <TableCell className=\"font-medium\">{payment.borrowerName}</TableCell>\n                        <TableCell className=\"font-semibold font-mono\">{formatCurrency(payment.amount)}</TableCell>\n                        <TableCell>\n                          <Badge className=\"hover-elevate\">{payment.paymentMethod}</Badge>\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">{payment.notes || 'N/A'}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"interest\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Interest Earned Report</CardTitle>\n              <CardDescription>Monthly breakdown of interest income</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {interestError ? (\n                <div className=\"text-center py-8 text-destructive\" data-testid=\"error-interest\">\n                  Failed to load interest data. Please try refreshing the page.\n                </div>\n              ) : isLoadingInterest ? (\n                <div className=\"text-center py-8 text-muted-foreground\">Loading...</div>\n              ) : !interestEarned || interestEarned.monthly.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">No interest data found</div>\n              ) : (\n                <>\n                  <div className=\"mb-6\">\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <LineChart data={interestEarned.monthly}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"month\" />\n                        <YAxis />\n                        <Tooltip \n                          formatter={(value: number) => formatCurrency(value)}\n                          labelFormatter={(label) => `Month: ${label}`}\n                        />\n                        <Legend />\n                        <Line \n                          type=\"monotone\" \n                          dataKey=\"total\" \n                          stroke=\"#3b82f6\" \n                          strokeWidth={2}\n                          name=\"Interest Earned\"\n                        />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  </div>\n\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Month</TableHead>\n                        <TableHead>Interest Earned</TableHead>\n                        <TableHead>Number of Entries</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {interestEarned.monthly.map((item) => (\n                        <TableRow key={item.month} data-testid={`row-interest-${item.month}`}>\n                          <TableCell className=\"font-medium\">{item.month}</TableCell>\n                          <TableCell className=\"font-semibold font-mono\">{formatCurrency(item.total)}</TableCell>\n                          <TableCell>{item.count}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"borrowers\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Borrower Summary Report</CardTitle>\n              <CardDescription>Financial overview by borrower</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {borrowersError ? (\n                <div className=\"text-center py-8 text-destructive\" data-testid=\"error-borrowers\">\n                  Failed to load borrower data. Please try refreshing the page.\n                </div>\n              ) : isLoadingBorrowers ? (\n                <div className=\"text-center py-8 text-muted-foreground\">Loading...</div>\n              ) : borrowerSummary.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">No borrowers found</div>\n              ) : (\n                <>\n                  <div className=\"mb-6\">\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <BarChart data={borrowerSummary}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"borrowerName\" />\n                        <YAxis />\n                        <Tooltip formatter={(value: number) => formatCurrency(value)} />\n                        <Legend />\n                        <Bar dataKey=\"totalPrincipal\" fill=\"#3b82f6\" name=\"Principal\" />\n                        <Bar dataKey=\"totalInterest\" fill=\"#10b981\" name=\"Interest\" />\n                        <Bar dataKey=\"balance\" fill=\"#f59e0b\" name=\"Balance\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </div>\n\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Borrower</TableHead>\n                        <TableHead>Contact</TableHead>\n                        <TableHead>Loans</TableHead>\n                        <TableHead>Principal</TableHead>\n                        <TableHead>Interest</TableHead>\n                        <TableHead>Paid</TableHead>\n                        <TableHead>Balance</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {borrowerSummary.map((borrower) => (\n                        <TableRow key={borrower.borrowerId} data-testid={`row-borrower-${borrower.borrowerId}`}>\n                          <TableCell className=\"font-medium\">{borrower.borrowerName}</TableCell>\n                          <TableCell className=\"text-sm text-muted-foreground\">\n                            {borrower.email}<br />\n                            {borrower.phone}\n                          </TableCell>\n                          <TableCell>\n                            <Badge className=\"hover-elevate\">\n                              {borrower.activeLoans} active / {borrower.loanCount} total\n                            </Badge>\n                          </TableCell>\n                          <TableCell className=\"font-mono\">{formatCurrency(borrower.totalPrincipal)}</TableCell>\n                          <TableCell className=\"font-mono\">{formatCurrency(borrower.totalInterest)}</TableCell>\n                          <TableCell className=\"font-mono\">{formatCurrency(borrower.totalPaid)}</TableCell>\n                          <TableCell className=\"font-semibold font-mono\">{formatCurrency(borrower.balance)}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":17874},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"design_guidelines.md":{"content":"# Design Guidelines: Lending Management Application\n\n## Design Approach\n\n**Reference-Based Approach**: Modern Financial SaaS\nDrawing inspiration from **Stripe Dashboard** (professional financial UI), **Linear** (clean typography and spacing), and **Mercury** (banking credibility), combined with **Material Design** principles for data-dense components and charts.\n\n**Core Design Principles**:\n- Professional credibility (handling financial data requires trust)\n- Information clarity (complex loan data must be instantly scannable)\n- Efficient workflows (minimize clicks for common actions)\n- Real-time feedback (live updates feel responsive and modern)\n\n---\n\n## Typography System\n\n**Font Families**:\n- Primary: Inter (headings, UI elements, data) - via Google Fonts\n- Monospace: JetBrains Mono (financial figures, amounts, transaction IDs)\n\n**Type Scale**:\n- Page Titles: text-3xl font-semibold (Dashboard, Borrowers, Reports)\n- Section Headers: text-xl font-semibold\n- Card Titles: text-lg font-medium\n- Body Text: text-base font-normal\n- Labels/Captions: text-sm font-medium\n- Financial Amounts: text-2xl font-bold tracking-tight (summary cards), text-lg font-semibold (loan details)\n- Small Data: text-xs font-medium (table metadata, badges)\n\n**Hierarchy Rules**:\n- All monetary values use monospace font for alignment and professionalism\n- Form labels are text-sm font-medium with slightly increased letter-spacing\n- Status indicators use text-xs font-semibold uppercase\n\n---\n\n## Layout System\n\n**Spacing Primitives**: Use Tailwind units of **2, 4, 6, 8, 12, 16** consistently\n- Component padding: p-6 (cards), p-4 (smaller cards)\n- Section spacing: space-y-8 (major sections), space-y-4 (related groups)\n- Inline spacing: gap-4 (standard), gap-2 (tight groups)\n- Page margins: p-8 (desktop), p-4 (mobile)\n\n**Grid System**:\n- Dashboard: 3-column grid on xl screens (lg:grid-cols-3), 2-column on md (md:grid-cols-2), single column mobile\n- Borrower cards: 2-column grid (md:grid-cols-2), expandable to 3 on larger screens\n- Summary cards: 4-column grid (xl:grid-cols-4 lg:grid-cols-2)\n\n**Container Widths**:\n- Main content: max-w-7xl mx-auto\n- Forms/Modals: max-w-2xl\n- Data tables: w-full with horizontal scroll on mobile\n\n---\n\n## Component Library\n\n### Navigation & Shell\n\n**Top Navigation Bar**:\n- Fixed at top, height h-16, border-b\n- Left: Logo/App name (text-xl font-bold)\n- Center: Main navigation tabs (Dashboard, Borrowers, Loans, Reports, Settings)\n- Right: Search icon, Notification bell with badge, User avatar dropdown\n- Notification bell has absolute positioned red dot badge for unread count\n\n**Sidebar** (Alternative layout option):\n- Fixed left sidebar w-64, collapsible to w-16 on mobile\n- Vertical navigation with icons + labels\n- Pinned items at bottom (Settings, Help, Logout)\n\n**Notification Panel**:\n- Dropdown from bell icon, w-96, max-h-96 with scroll\n- Each notification: p-4, border-b, hover background change\n- Notification types indicated by icons (payment=check, alert=warning, reminder=clock)\n- \"Mark all as read\" button at bottom\n\n### Dashboard Components\n\n**Summary Cards**:\n- Grid layout, each card p-6, rounded-lg, border, shadow-sm\n- Icon in top-left (h-10 w-10 rounded-full with icon)\n- Label: text-sm font-medium\n- Value: text-3xl font-bold tracking-tight (monospace for amounts)\n- Sub-value: text-sm with trend indicator (↑/↓ arrow + percentage)\n- Subtle pulse animation for real-time updates\n\n**Chart Components**:\n- Container: p-6, rounded-lg, border, min-h-80\n- Header: flex justify-between with title (text-lg font-semibold) and time range selector\n- Time range: Button group with segments (7D, 1M, 3M, 6M, 1Y, Custom)\n- Charts using Recharts with consistent styling (smooth curves, minimal grid lines)\n- Interactive tooltips on hover showing exact values\n- Export button (download icon) in top-right\n\n**Borrower List Cards**:\n- Each borrower: p-4, rounded-lg, border, flex layout\n- Left: Avatar (circular, 48px) or initials in colored circle\n- Center: Name (text-lg font-semibold), contact info (text-sm), last payment date\n- Right: Financial summary stacked (Outstanding, Pending Interest in monospace)\n- Status badge: Small pill shaped, absolute top-right (Active/Overdue/Settled)\n- Quick action buttons at bottom: Icon buttons for View, Add Payment, Send Reminder\n- Hover effect: subtle shadow elevation\n\n**Activity Feed**:\n- Vertical timeline with connecting lines\n- Each item: flex with icon, timestamp, description, amount\n- Real-time items slide in from top with subtle animation\n\n### Forms & Inputs\n\n**Input Fields**:\n- Height h-11, rounded-md, border, px-4\n- Labels above: text-sm font-medium, mb-2\n- Focus state: ring-2 offset\n- Error state: border-red, text-red error message below\n- Helper text: text-xs below field\n\n**Dropdowns/Selects**:\n- Styled consistently with inputs\n- Custom arrow icon on right\n- Dropdown menu: shadow-lg, rounded-md, max-h-60 with scroll\n\n**Date Pickers**:\n- Input with calendar icon on right\n- Calendar popup: rounded-lg, shadow-xl, p-4\n- Month/year navigation at top\n- Selected date highlighted, today outlined\n\n**File Upload**:\n- Dashed border drag-drop area, p-8, rounded-lg\n- Upload icon centered with \"Drop files here or click to browse\"\n- Uploaded files shown below as chips with filename and remove (x) button\n\n**Action Buttons**:\n- Primary: px-6 py-2.5 rounded-md font-medium (for main actions like \"Add Payment\", \"Save\")\n- Secondary: Same size, border variant\n- Icon buttons: p-2 rounded-md (for quick actions)\n- Destructive: Red variant for delete/remove actions\n\n### Tables & Data Display\n\n**Data Tables**:\n- w-full, border rounded-lg, overflow-hidden\n- Header: border-b, font-semibold, text-sm, p-4, sticky on scroll\n- Rows: p-4, border-b, hover background\n- Financial columns: Right-aligned, monospace font\n- Action column: Right-aligned with icon buttons (Edit, Delete)\n- Pagination: Centered below table with page numbers and prev/next\n\n**Transaction History**:\n- Each transaction row: flex justify-between, p-4, border-b\n- Left: Date (text-sm) above description (text-base font-medium)\n- Right: Amount (text-lg font-semibold monospace) above payment method badge\n- Expandable accordion for transaction details (receipt, notes)\n\n**Badges & Pills**:\n- Rounded-full, px-3 py-1, text-xs font-semibold\n- Status types: Active, Overdue, Settled, Pending\n- Payment types: Principal, Interest, Mixed\n\n### Modals & Overlays\n\n**Modal Structure**:\n- Fixed overlay with backdrop blur\n- Modal: max-w-2xl, rounded-lg, shadow-2xl, p-0\n- Header: p-6, border-b with title (text-xl font-semibold) and close (x) button\n- Body: p-6, max-h-96 overflow-scroll\n- Footer: p-6, border-t, flex justify-end with Cancel and Confirm buttons\n\n**Toast Notifications**:\n- Fixed bottom-right, stack vertically with gap-2\n- Each toast: p-4, rounded-lg, shadow-lg, flex items-center, max-w-sm\n- Icon on left, message, close button on right\n- Slide-in animation, auto-dismiss after 5 seconds\n- Types: Success (checkmark), Error (x), Warning (alert), Info (i)\n\n**Confirmation Dialogs**:\n- Smaller modal (max-w-md)\n- Icon at top (warning triangle for destructive actions)\n- Clear question/message\n- Two buttons: Cancel (secondary) and Confirm (primary or destructive)\n\n---\n\n## Interaction Patterns\n\n**Real-Time Updates**:\n- Pulse animation on updated elements (subtle ring expanding)\n- New items slide in with fade\n- Updated values briefly highlight then fade to normal\n\n**Loading States**:\n- Skeleton screens for initial load (pulse animation)\n- Spinner for inline actions (small circular spinner)\n- Progress bars for file uploads\n\n**Empty States**:\n- Centered illustration/icon (h-24 w-24)\n- Heading: text-lg font-semibold\n- Description: text-sm\n- Call-to-action button below\n\n**Hover Effects**:\n- Cards: subtle shadow elevation\n- Buttons: slight brightness change\n- Table rows: background tint\n- No animated transitions (keep crisp)\n\n---\n\n## Data Visualization\n\n**Chart Styling**:\n- Grid lines: subtle, dotted\n- Axes: clear labels, text-sm\n- Data series: distinct colors with adequate contrast\n- Tooltips: rounded-md, shadow-lg, p-2 with exact values\n- Legend: horizontal below chart with clickable items to toggle series\n\n**Graph Types**:\n- Line charts: Smooth curves for trends (interest accrual, outstanding principal)\n- Bar charts: Rounded corners for monthly comparisons\n- Pie/Donut charts: Segments with labels, center displays total\n- Area charts: Gradient fill for cash flow visualization\n\n---\n\n## Images\n\n**Profile Pictures**: Circular avatars throughout (borrower list, user menu). Use placeholder initials in colored circles when no image uploaded.\n\n**Illustrations**: Simple line-art illustrations for empty states (no borrowers, no payments yet) - use Hero Icons or similar icon library.\n\n**Document Previews**: Thumbnail preview (128px) with file type icon overlay for uploaded agreements/receipts.\n\n**No large hero images** - this is a data-focused application dashboard, not a marketing site.\n\n---\n\n## Dark Mode Support\n\n**Theme System**:\n- Automatic theme toggle with localStorage persistence\n- Smooth theme transitions using CSS classes (.light and .dark)\n- Theme toggle button in header (Sun icon for dark mode, Moon icon for light mode)\n\n**Dark Mode Colors** (Configured in index.css):\n- Background: Deep slate (222 47% 11%)\n- Foreground: Light gray (210 20% 98%)\n- Card backgrounds: Slightly lighter than background (222 47% 13%)\n- Borders: Subtle gray (217 19% 20%)\n- Primary: Same vibrant blue in both modes (217 91% 60%)\n- Muted elements: Darker in dark mode for proper contrast\n\n**Implementation Guidelines**:\n- All components automatically adapt to theme via CSS variables\n- Use semantic color tokens (bg-background, text-foreground) instead of hardcoded colors\n- Charts use adjusted colors for dark mode visibility\n- Shadows are more prominent in dark mode for depth perception\n- All interactive elements maintain proper contrast ratios in both modes\n\n**Header Design**:\n- Backdrop blur effect (backdrop-blur) for modern glassmorphism\n- Semi-transparent background (bg-background/95) overlaying content\n- Gradient logo badge from primary to primary/80\n- Theme toggle positioned next to notifications for easy access","size_bytes":10213},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/NotificationPanel.tsx":{"content":"import { NotificationPanel } from '../NotificationPanel';\n\nconst mockNotifications = [\n  {\n    id: '1',\n    type: 'payment' as const,\n    title: 'Payment Received',\n    message: 'Rajesh Kumar paid ₹50,000 via UPI',\n    timestamp: '2 minutes ago',\n    read: false,\n  },\n  {\n    id: '2',\n    type: 'alert' as const,\n    title: 'High Pending Interest',\n    message: 'Priya Sharma has ₹3.2L pending interest',\n    timestamp: '1 hour ago',\n    read: false,\n  },\n  {\n    id: '3',\n    type: 'reminder' as const,\n    title: 'Email Sent',\n    message: 'Payment reminder sent to Amit Patel',\n    timestamp: '3 hours ago',\n    read: true,\n  },\n];\n\nexport default function NotificationPanelExample() {\n  return (\n    <div className=\"p-6\">\n      <NotificationPanel\n        notifications={mockNotifications}\n        onMarkAsRead={(id) => console.log('Mark as read:', id)}\n        onMarkAllAsRead={() => console.log('Mark all as read')}\n        onDismiss={(id) => console.log('Dismiss:', id)}\n      />\n    </div>\n  );\n}\n","size_bytes":1009},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { startReminderScheduler } from \"./reminderSchedulerService\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n    \n    // Start the monthly interest reminder scheduler\n    startReminderScheduler();\n  });\n})();\n","size_bytes":2367},"server/storage.ts":{"content":"import {\n  users,\n  borrowers,\n  loans,\n  payments,\n  reminders,\n  emailLogs,\n  emailTemplates,\n  auditLogs,\n  type User,\n  type UpsertUser,\n  type Borrower,\n  type InsertBorrower,\n  type Loan,\n  type InsertLoan,\n  type Payment,\n  type InsertPayment,\n  type Reminder,\n  type InsertReminder,\n  type EmailLog,\n  type InsertEmailLog,\n  type EmailTemplate,\n  type InsertEmailTemplate,\n  type AuditLog,\n  type InsertAuditLog,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, gte, lte, sql } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserPreferences(userId: string, preferences: Partial<UpsertUser>): Promise<User>;\n\n  // Borrower operations\n  getBorrowers(userId: string): Promise<Borrower[]>;\n  getBorrower(id: string, userId: string): Promise<Borrower | undefined>;\n  createBorrower(borrower: InsertBorrower): Promise<Borrower>;\n  updateBorrower(id: string, userId: string, borrower: Partial<InsertBorrower>): Promise<Borrower>;\n  deleteBorrower(id: string, userId: string): Promise<void>;\n\n  // Loan operations\n  getLoans(userId: string, borrowerId?: string): Promise<Loan[]>;\n  getLoan(id: string, userId: string): Promise<Loan | undefined>;\n  createLoan(loan: InsertLoan): Promise<Loan>;\n  updateLoan(id: string, userId: string, loan: Partial<InsertLoan>): Promise<Loan>;\n  deleteLoan(id: string, userId: string): Promise<void>;\n\n  // Payment operations\n  getPayments(userId: string, loanId?: string): Promise<Payment[]>;\n  getPayment(id: string, userId: string): Promise<Payment | undefined>;\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  updatePayment(id: string, userId: string, payment: Partial<InsertPayment>): Promise<Payment>;\n  deletePayment(id: string, userId: string): Promise<void>;\n\n  // Reminder operations\n  getReminders(userId: string, borrowerId?: string): Promise<Reminder[]>;\n  getReminder(id: string, userId: string): Promise<Reminder | undefined>;\n  createReminder(reminder: InsertReminder): Promise<Reminder>;\n  updateReminder(id: string, userId: string, reminder: Partial<InsertReminder>): Promise<Reminder>;\n  deleteReminder(id: string, userId: string): Promise<void>;\n\n  // Email log operations\n  getEmailLogs(userId: string, borrowerId?: string): Promise<EmailLog[]>;\n  createEmailLog(emailLog: InsertEmailLog): Promise<EmailLog>;\n\n  // Email template operations\n  getEmailTemplates(userId: string, type?: string): Promise<EmailTemplate[]>;\n  getEmailTemplate(id: string, userId: string): Promise<EmailTemplate | undefined>;\n  createEmailTemplate(template: InsertEmailTemplate): Promise<EmailTemplate>;\n  updateEmailTemplate(id: string, userId: string, template: Partial<InsertEmailTemplate>): Promise<EmailTemplate>;\n  deleteEmailTemplate(id: string, userId: string): Promise<void>;\n\n  // Audit log operations\n  createAuditLog(log: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogs(userId: string, limit?: number): Promise<AuditLog[]>;\n\n  // Analytics operations\n  getDashboardStats(userId: string): Promise<{\n    totalLent: string;\n    outstandingPrincipal: string;\n    interestReceived: string;\n    interestPending: string;\n    activeBorrowers: number;\n    activeLoans: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserPreferences(userId: string, preferences: Partial<UpsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...preferences, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Borrower operations\n  async getBorrowers(userId: string): Promise<Borrower[]> {\n    return db.select().from(borrowers).where(eq(borrowers.userId, userId)).orderBy(desc(borrowers.createdAt));\n  }\n\n  async getBorrower(id: string, userId: string): Promise<Borrower | undefined> {\n    const [borrower] = await db\n      .select()\n      .from(borrowers)\n      .where(and(eq(borrowers.id, id), eq(borrowers.userId, userId)));\n    return borrower;\n  }\n\n  async createBorrower(borrower: InsertBorrower): Promise<Borrower> {\n    const [newBorrower] = await db.insert(borrowers).values(borrower).returning();\n    return newBorrower;\n  }\n\n  async updateBorrower(id: string, userId: string, borrower: Partial<InsertBorrower>): Promise<Borrower> {\n    const [updated] = await db\n      .update(borrowers)\n      .set({ ...borrower, updatedAt: new Date() })\n      .where(and(eq(borrowers.id, id), eq(borrowers.userId, userId)))\n      .returning();\n    return updated;\n  }\n\n  async deleteBorrower(id: string, userId: string): Promise<void> {\n    await db.delete(borrowers).where(and(eq(borrowers.id, id), eq(borrowers.userId, userId)));\n  }\n\n  // Loan operations\n  async getLoans(userId: string, borrowerId?: string): Promise<Loan[]> {\n    const conditions = [eq(loans.userId, userId)];\n    if (borrowerId) {\n      conditions.push(eq(loans.borrowerId, borrowerId));\n    }\n    return db\n      .select()\n      .from(loans)\n      .where(and(...conditions))\n      .orderBy(desc(loans.createdAt));\n  }\n\n  async getLoan(id: string, userId: string): Promise<Loan | undefined> {\n    const [loan] = await db.select().from(loans).where(and(eq(loans.id, id), eq(loans.userId, userId)));\n    return loan;\n  }\n\n  async createLoan(loan: InsertLoan): Promise<Loan> {\n    const [newLoan] = await db.insert(loans).values(loan).returning();\n    return newLoan;\n  }\n\n  async updateLoan(id: string, userId: string, loan: Partial<InsertLoan>): Promise<Loan> {\n    const [updated] = await db\n      .update(loans)\n      .set({ ...loan, updatedAt: new Date() })\n      .where(and(eq(loans.id, id), eq(loans.userId, userId)))\n      .returning();\n    return updated;\n  }\n\n  async deleteLoan(id: string, userId: string): Promise<void> {\n    await db.delete(loans).where(and(eq(loans.id, id), eq(loans.userId, userId)));\n  }\n\n  // Payment operations\n  async getPayments(userId: string, loanId?: string): Promise<Payment[]> {\n    const conditions = [eq(payments.userId, userId)];\n    if (loanId) {\n      conditions.push(eq(payments.loanId, loanId));\n    }\n    return db\n      .select()\n      .from(payments)\n      .where(and(...conditions))\n      .orderBy(desc(payments.paymentDate));\n  }\n\n  async getPayment(id: string, userId: string): Promise<Payment | undefined> {\n    const [payment] = await db\n      .select()\n      .from(payments)\n      .where(and(eq(payments.id, id), eq(payments.userId, userId)));\n    return payment;\n  }\n\n  async createPayment(payment: InsertPayment): Promise<Payment> {\n    const [newPayment] = await db.insert(payments).values(payment).returning();\n    return newPayment;\n  }\n\n  async updatePayment(id: string, userId: string, payment: Partial<InsertPayment>): Promise<Payment> {\n    const [updated] = await db\n      .update(payments)\n      .set({ ...payment, updatedAt: new Date() })\n      .where(and(eq(payments.id, id), eq(payments.userId, userId)))\n      .returning();\n    return updated;\n  }\n\n  async deletePayment(id: string, userId: string): Promise<void> {\n    await db.delete(payments).where(and(eq(payments.id, id), eq(payments.userId, userId)));\n  }\n\n  // Reminder operations\n  async getReminders(userId: string, borrowerId?: string): Promise<Reminder[]> {\n    const conditions = [eq(reminders.userId, userId)];\n    if (borrowerId) {\n      conditions.push(eq(reminders.borrowerId, borrowerId));\n    }\n    return db\n      .select()\n      .from(reminders)\n      .where(and(...conditions))\n      .orderBy(desc(reminders.scheduledFor));\n  }\n\n  async getReminder(id: string, userId: string): Promise<Reminder | undefined> {\n    const [reminder] = await db\n      .select()\n      .from(reminders)\n      .where(and(eq(reminders.id, id), eq(reminders.userId, userId)));\n    return reminder;\n  }\n\n  async createReminder(reminder: InsertReminder): Promise<Reminder> {\n    const [newReminder] = await db.insert(reminders).values({\n      ...reminder,\n      metadata: reminder.metadata as any, // Cast to handle Drizzle JSON type\n    }).returning();\n    return newReminder;\n  }\n\n  async updateReminder(id: string, userId: string, reminder: Partial<InsertReminder>): Promise<Reminder> {\n    const updateData: any = { ...reminder, updatedAt: new Date() };\n    if (reminder.metadata) {\n      updateData.metadata = reminder.metadata as any; // Cast to handle Drizzle JSON type\n    }\n    const [updated] = await db\n      .update(reminders)\n      .set(updateData)\n      .where(and(eq(reminders.id, id), eq(reminders.userId, userId)))\n      .returning();\n    return updated;\n  }\n\n  async deleteReminder(id: string, userId: string): Promise<void> {\n    await db.delete(reminders).where(and(eq(reminders.id, id), eq(reminders.userId, userId)));\n  }\n\n  // Email log operations\n  async getEmailLogs(userId: string, borrowerId?: string): Promise<EmailLog[]> {\n    const conditions = [eq(emailLogs.userId, userId)];\n    if (borrowerId) {\n      conditions.push(eq(emailLogs.borrowerId, borrowerId));\n    }\n    return db\n      .select()\n      .from(emailLogs)\n      .where(and(...conditions))\n      .orderBy(desc(emailLogs.sentAt));\n  }\n\n  async createEmailLog(emailLog: InsertEmailLog): Promise<EmailLog> {\n    const [newLog] = await db.insert(emailLogs).values(emailLog).returning();\n    return newLog;\n  }\n\n  // Email template operations\n  async getEmailTemplates(userId: string, type?: string): Promise<EmailTemplate[]> {\n    const conditions = [eq(emailTemplates.userId, userId)];\n    if (type) {\n      conditions.push(eq(emailTemplates.type, type));\n    }\n    return db\n      .select()\n      .from(emailTemplates)\n      .where(and(...conditions))\n      .orderBy(desc(emailTemplates.createdAt));\n  }\n\n  async getEmailTemplate(id: string, userId: string): Promise<EmailTemplate | undefined> {\n    const [template] = await db\n      .select()\n      .from(emailTemplates)\n      .where(and(eq(emailTemplates.id, id), eq(emailTemplates.userId, userId)));\n    return template;\n  }\n\n  async createEmailTemplate(template: InsertEmailTemplate): Promise<EmailTemplate> {\n    const [newTemplate] = await db.insert(emailTemplates).values(template).returning();\n    return newTemplate;\n  }\n\n  async updateEmailTemplate(\n    id: string,\n    userId: string,\n    template: Partial<InsertEmailTemplate>\n  ): Promise<EmailTemplate> {\n    const [updated] = await db\n      .update(emailTemplates)\n      .set({ ...template, updatedAt: new Date() })\n      .where(and(eq(emailTemplates.id, id), eq(emailTemplates.userId, userId)))\n      .returning();\n    return updated;\n  }\n\n  async deleteEmailTemplate(id: string, userId: string): Promise<void> {\n    await db\n      .delete(emailTemplates)\n      .where(and(eq(emailTemplates.id, id), eq(emailTemplates.userId, userId)));\n  }\n\n  // Audit log operations\n  async createAuditLog(log: InsertAuditLog): Promise<AuditLog> {\n    const [newLog] = await db.insert(auditLogs).values(log).returning();\n    return newLog;\n  }\n\n  async getAuditLogs(userId: string, limit: number = 100): Promise<AuditLog[]> {\n    return db\n      .select()\n      .from(auditLogs)\n      .where(eq(auditLogs.userId, userId))\n      .orderBy(desc(auditLogs.createdAt))\n      .limit(limit);\n  }\n\n  // Analytics operations\n  async getDashboardStats(userId: string): Promise<{\n    totalLent: string;\n    outstandingPrincipal: string;\n    interestReceived: string;\n    interestPending: string;\n    activeBorrowers: number;\n    activeLoans: number;\n  }> {\n    // Get all loans for the user\n    const userLoans = await this.getLoans(userId);\n    \n    // Get all payments for the user\n    const userPayments = await this.getPayments(userId);\n    \n    // Get all borrowers for the user\n    const userBorrowers = await this.getBorrowers(userId);\n    \n    // Calculate total lent\n    const totalLent = userLoans.reduce((sum, loan) => sum + parseFloat(loan.principalAmount), 0);\n    \n    // Calculate outstanding principal (total lent minus principal payments)\n    const principalPaid = userPayments\n      .filter(p => p.paymentType === 'principal' || p.paymentType === 'mixed')\n      .reduce((sum, payment) => sum + parseFloat(payment.amount), 0);\n    const outstandingPrincipal = totalLent - principalPaid;\n    \n    // Calculate interest received (interest payments)\n    const interestReceived = userPayments\n      .filter(p => p.paymentType === 'interest' || p.paymentType === 'partial_interest')\n      .reduce((sum, payment) => sum + parseFloat(payment.amount), 0);\n    \n    // Calculate interest pending (would need interest calculation logic - simplified for now)\n    const interestPending = 0; // TODO: Implement interest calculation\n    \n    // Count active borrowers and loans\n    const activeBorrowers = userBorrowers.filter(b => b.status === 'active').length;\n    const activeLoans = userLoans.filter(l => l.status === 'active').length;\n    \n    return {\n      totalLent: totalLent.toFixed(2),\n      outstandingPrincipal: outstandingPrincipal.toFixed(2),\n      interestReceived: interestReceived.toFixed(2),\n      interestPending: interestPending.toFixed(2),\n      activeBorrowers,\n      activeLoans,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":13701},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/AddPaymentModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Upload } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Borrower, Loan } from \"@shared/schema\";\n\ninterface AddPaymentModalProps {\n  open: boolean;\n  onClose: () => void;\n  preSelectedBorrowerId?: string | null;\n}\n\nexport function AddPaymentModal({\n  open,\n  onClose,\n  preSelectedBorrowerId,\n}: AddPaymentModalProps) {\n  const { toast } = useToast();\n  const [borrowerId, setBorrowerId] = useState(\"\");\n  const [loanId, setLoanId] = useState(\"\");\n  const [paymentType, setPaymentType] = useState(\"\");\n  const [paymentMethod, setPaymentMethod] = useState(\"\");\n\n  // Fetch borrowers\n  const { data: borrowers = [] } = useQuery<Borrower[]>({\n    queryKey: ['/api/borrowers'],\n    enabled: open,\n  });\n\n  // Fetch loans for selected borrower\n  const { data: allLoans = [] } = useQuery<Loan[]>({\n    queryKey: ['/api/loans'],\n    enabled: open,\n  });\n\n  const borrowerLoans = allLoans.filter(loan => loan.borrowerId === borrowerId);\n\n  // Set pre-selected borrower when modal opens\n  useEffect(() => {\n    if (open && preSelectedBorrowerId) {\n      setBorrowerId(preSelectedBorrowerId);\n    } else if (open && !preSelectedBorrowerId) {\n      setBorrowerId(\"\");\n      setLoanId(\"\");\n    }\n  }, [open, preSelectedBorrowerId]);\n\n  // Reset loan when borrower changes\n  useEffect(() => {\n    setLoanId(\"\");\n  }, [borrowerId]);\n\n  const addPaymentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/payments\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/payments'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/loans'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n      toast({\n        title: \"Payment added\",\n        description: \"The payment has been recorded successfully.\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!borrowerId || !loanId) {\n      toast({\n        title: \"Error\",\n        description: \"Please select both borrower and loan\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const formData = new FormData(e.target as HTMLFormElement);\n    const amount = formData.get(\"amount\")?.toString();\n    const paymentDate = formData.get(\"payment-date\")?.toString();\n    \n    if (!amount || !paymentDate) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    addPaymentMutation.mutate({\n      loanId,\n      amount,\n      paymentDate,\n      paymentType,\n      paymentMethod,\n      transactionReference: formData.get(\"reference\")?.toString() || null,\n      notes: formData.get(\"notes\")?.toString() || null,\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"modal-add-payment\">\n        <DialogHeader>\n          <DialogTitle>Add Payment</DialogTitle>\n          <DialogDescription>\n            Record a new payment from a borrower\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit}>\n          <div className=\"grid gap-6 py-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"borrower\">Borrower</Label>\n                <Select value={borrowerId} onValueChange={setBorrowerId} required>\n                  <SelectTrigger id=\"borrower\" data-testid=\"select-borrower\">\n                    <SelectValue placeholder=\"Select borrower\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {borrowers.map((borrower) => (\n                      <SelectItem key={borrower.id} value={borrower.id}>\n                        {borrower.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"loan\">Loan</Label>\n                <Select value={loanId} onValueChange={setLoanId} required disabled={!borrowerId}>\n                  <SelectTrigger id=\"loan\" data-testid=\"select-loan\">\n                    <SelectValue placeholder=\"Select loan\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {borrowerLoans.map((loan) => (\n                      <SelectItem key={loan.id} value={loan.id}>\n                        ₹{parseFloat(loan.principalAmount).toLocaleString()} @ {loan.interestRate}%\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"payment-date\">Payment Date</Label>\n                <Input\n                  id=\"payment-date\"\n                  name=\"payment-date\"\n                  type=\"date\"\n                  required\n                  data-testid=\"input-payment-date\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"amount\">Amount (₹)</Label>\n                <Input\n                  id=\"amount\"\n                  name=\"amount\"\n                  type=\"number\"\n                  placeholder=\"50000\"\n                  required\n                  className=\"font-mono\"\n                  data-testid=\"input-amount\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"payment-type\">Payment Type</Label>\n                <Select value={paymentType} onValueChange={setPaymentType} required>\n                  <SelectTrigger id=\"payment-type\" data-testid=\"select-payment-type\">\n                    <SelectValue placeholder=\"Select type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"principal\">Principal Repayment</SelectItem>\n                    <SelectItem value=\"interest\">Interest Payment</SelectItem>\n                    <SelectItem value=\"partial-interest\">Partial Interest</SelectItem>\n                    <SelectItem value=\"mixed\">Mixed (Principal + Interest)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"payment-method\">Payment Method</Label>\n                <Select value={paymentMethod} onValueChange={setPaymentMethod} required>\n                  <SelectTrigger id=\"payment-method\" data-testid=\"select-payment-method\">\n                    <SelectValue placeholder=\"Select method\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"cash\">Cash</SelectItem>\n                    <SelectItem value=\"upi\">UPI</SelectItem>\n                    <SelectItem value=\"bank-transfer\">Bank Transfer</SelectItem>\n                    <SelectItem value=\"cheque\">Cheque</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"reference\">Transaction Reference (Optional)</Label>\n              <Input\n                id=\"reference\"\n                name=\"reference\"\n                placeholder=\"UPI ID, Cheque number, etc.\"\n                data-testid=\"input-reference\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"notes\">Notes (Optional)</Label>\n              <Textarea\n                id=\"notes\"\n                name=\"notes\"\n                placeholder=\"Additional remarks about this payment...\"\n                rows={3}\n                data-testid=\"textarea-notes\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Upload Receipt (Optional)</Label>\n              <div className=\"border-2 border-dashed rounded-md p-6 text-center hover-elevate cursor-pointer\">\n                <Upload className=\"h-8 w-8 mx-auto text-muted-foreground mb-2\" />\n                <p className=\"text-sm text-muted-foreground\">\n                  Click to upload or drag and drop\n                </p>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  PNG, JPG or PDF up to 10MB\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button type=\"button\" variant=\"outline\" onClick={onClose} data-testid=\"button-cancel\">\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={addPaymentMutation.isPending} data-testid=\"button-submit-payment\">\n              {addPaymentMutation.isPending ? \"Adding...\" : \"Add Payment\"}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9882},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 222 47% 11%;\n\n  --border: 220 13% 91%;\n\n  --card: 0 0% 98%;\n\n  --card-foreground: 222 47% 11%;\n\n  --card-border: 220 13% 94%;\n\n  --sidebar: 220 9% 96%;\n\n  --sidebar-foreground: 222 47% 11%;\n\n  --sidebar-border: 220 13% 91%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 14% 92%;\n\n  --sidebar-accent-foreground: 222 47% 11%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 220 14% 94%;\n\n  --popover-foreground: 222 47% 11%;\n\n  --popover-border: 220 13% 89%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 14% 90%;\n\n  --secondary-foreground: 222 47% 11%;\n\n  --muted: 220 13% 93%;\n\n  --muted-foreground: 220 9% 46%;\n\n  --accent: 217 16% 92%;\n\n  --accent-foreground: 222 47% 11%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 13% 85%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 60%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 262 83% 58%;\n  --chart-4: 32 95% 44%;\n  --chart-5: 340 82% 52%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  --font-serif: Georgia, Cambria, 'Times New Roman', Times, serif;\n  --font-mono: 'JetBrains Mono', 'Courier New', Courier, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 9% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 13% 9% / 0.1);\n  --shadow-sm: 0px 1px 2px 0px hsl(220 13% 9% / 0.06), 0px 1px 3px 0px hsl(220 13% 9% / 0.1);\n  --shadow: 0px 1px 3px 0px hsl(220 13% 9% / 0.1), 0px 1px 2px -1px hsl(220 13% 9% / 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(220 13% 9% / 0.1), 0px 2px 4px -2px hsl(220 13% 9% / 0.1);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 13% 9% / 0.1), 0px 4px 6px -4px hsl(220 13% 9% / 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 13% 9% / 0.1), 0px 8px 10px -6px hsl(220 13% 9% / 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 13% 9% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 47% 11%;\n\n  --foreground: 210 20% 98%;\n\n  --border: 217 19% 20%;\n\n  --card: 222 47% 13%;\n\n  --card-foreground: 210 20% 98%;\n\n  --card-border: 217 19% 17%;\n\n  --sidebar: 222 47% 15%;\n\n  --sidebar-foreground: 210 20% 98%;\n\n  --sidebar-border: 217 19% 19%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 15% 20%;\n\n  --sidebar-accent-foreground: 210 20% 98%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 220 15% 18%;\n\n  --popover-foreground: 210 20% 98%;\n\n  --popover-border: 217 19% 22%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 15% 22%;\n\n  --secondary-foreground: 210 20% 98%;\n\n  --muted: 220 15% 19%;\n\n  --muted-foreground: 217 10% 64%;\n\n  --accent: 217 16% 21%;\n\n  --accent-foreground: 210 20% 98%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 217 19% 27%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 65%;\n  --chart-2: 142 76% 45%;\n  --chart-3: 262 83% 67%;\n  --chart-4: 32 95% 55%;\n  --chart-5: 340 82% 62%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.3);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.4);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.3), 0px 1px 3px 0px hsl(0 0% 0% / 0.4);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.4), 0px 1px 2px -1px hsl(0 0% 0% / 0.4);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.4), 0px 2px 4px -2px hsl(0 0% 0% / 0.4);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.5), 0px 4px 6px -4px hsl(0 0% 0% / 0.5);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.5), 0px 8px 10px -6px hsl(0 0% 0% / 0.5);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.6);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9628},"client/src/pages/Borrowers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { UserPlus, Mail, Phone, MapPin } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { AddBorrowerModal } from \"@/components/AddBorrowerModal\";\nimport type { Borrower } from \"@shared/schema\";\n\nexport default function Borrowers() {\n  const [addModalOpen, setAddModalOpen] = useState(false);\n\n  const { data: borrowers = [], isLoading } = useQuery<Borrower[]>({\n    queryKey: ['/api/borrowers'],\n  });\n\n  return (\n    <div className=\"p-8 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Borrowers</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage your borrowers and their details\n          </p>\n        </div>\n        <Button onClick={() => setAddModalOpen(true)} data-testid=\"button-add-borrower\">\n          <UserPlus className=\"h-4 w-4 mr-2\" />\n          Add Borrower\n        </Button>\n      </div>\n\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <Skeleton key={i} className=\"h-48\" data-testid={`skeleton-borrower-${i}`} />\n          ))}\n        </div>\n      ) : borrowers.length === 0 ? (\n        <div className=\"p-12 text-center border rounded-lg\">\n          <UserPlus className=\"h-16 w-16 mx-auto mb-4 opacity-50 text-muted-foreground\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No Borrowers Yet</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Get started by adding your first borrower\n          </p>\n          <Button onClick={() => setAddModalOpen(true)}>\n            <UserPlus className=\"h-4 w-4 mr-2\" />\n            Add Your First Borrower\n          </Button>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {borrowers.map((borrower) => (\n            <Card key={borrower.id} className=\"hover-elevate\" data-testid={`card-borrower-${borrower.id}`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center\">\n                      <span className=\"text-primary font-semibold text-sm\">\n                        {borrower.name.split(' ').map(n => n[0]).join('').slice(0, 2)}\n                      </span>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold\" data-testid={`text-borrower-name-${borrower.id}`}>\n                        {borrower.name}\n                      </h3>\n                      <Badge \n                        variant={\n                          borrower.status === 'active' ? 'default' : \n                          borrower.status === 'overdue' ? 'destructive' : \n                          'secondary'\n                        }\n                        className=\"text-xs mt-1\"\n                        data-testid={`badge-status-${borrower.id}`}\n                      >\n                        {borrower.status}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Mail className=\"h-4 w-4\" />\n                  <span data-testid={`text-email-${borrower.id}`}>{borrower.email}</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Phone className=\"h-4 w-4\" />\n                  <span data-testid={`text-phone-${borrower.id}`}>{borrower.phone}</span>\n                </div>\n                {borrower.address && (\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <MapPin className=\"h-4 w-4\" />\n                    <span className=\"line-clamp-1\" data-testid={`text-address-${borrower.id}`}>\n                      {borrower.address}\n                    </span>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      <AddBorrowerModal open={addModalOpen} onClose={() => setAddModalOpen(false)} />\n    </div>\n  );\n}\n","size_bytes":4677},"client/src/components/examples/ActivityFeed.tsx":{"content":"import { ActivityFeed } from '../ActivityFeed';\n\nconst mockActivities = [\n  {\n    id: '1',\n    type: 'payment' as const,\n    title: 'Payment Received - Rajesh Kumar',\n    description: 'Principal payment received via UPI',\n    amount: '₹50,000',\n    timestamp: '2 hours ago',\n  },\n  {\n    id: '2',\n    type: 'alert' as const,\n    title: 'High Pending Interest Alert',\n    description: 'Priya Sharma has ₹3.2L pending interest (>3 months)',\n    timestamp: '5 hours ago',\n  },\n  {\n    id: '3',\n    type: 'reminder' as const,\n    title: 'Email Reminder Sent',\n    description: 'Payment reminder sent to Amit Patel',\n    timestamp: '1 day ago',\n  },\n  {\n    id: '4',\n    type: 'payment' as const,\n    title: 'Interest Payment - Neha Gupta',\n    description: 'Partial interest payment via bank transfer',\n    amount: '₹25,000',\n    timestamp: '2 days ago',\n  },\n];\n\nexport default function ActivityFeedExample() {\n  return (\n    <div className=\"p-6 max-w-md\">\n      <ActivityFeed activities={mockActivities} />\n    </div>\n  );\n}\n","size_bytes":1029},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ActivityFeed.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle2, AlertCircle, Clock, Mail } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Activity {\n  id: string;\n  type: \"payment\" | \"alert\" | \"reminder\" | \"system\";\n  title: string;\n  description: string;\n  amount?: string;\n  timestamp: string;\n}\n\ninterface ActivityFeedProps {\n  activities: Activity[];\n}\n\nexport function ActivityFeed({ activities }: ActivityFeedProps) {\n  const getIcon = (type: Activity[\"type\"]) => {\n    switch (type) {\n      case \"payment\":\n        return <CheckCircle2 className=\"h-5 w-5 text-green-500\" />;\n      case \"alert\":\n        return <AlertCircle className=\"h-5 w-5 text-red-500\" />;\n      case \"reminder\":\n        return <Mail className=\"h-5 w-5 text-blue-500\" />;\n      default:\n        return <Clock className=\"h-5 w-5 text-muted-foreground\" />;\n    }\n  };\n\n  const getTypeLabel = (type: Activity[\"type\"]) => {\n    switch (type) {\n      case \"payment\":\n        return \"Payment\";\n      case \"alert\":\n        return \"Alert\";\n      case \"reminder\":\n        return \"Reminder\";\n      default:\n        return \"System\";\n    }\n  };\n\n  return (\n    <Card data-testid=\"card-activity-feed\">\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold\">Recent Activity</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {activities.map((activity, index) => (\n            <div\n              key={activity.id}\n              className={cn(\n                \"flex gap-4 pb-4\",\n                index !== activities.length - 1 && \"border-b\"\n              )}\n              data-testid={`activity-${activity.id}`}\n            >\n              <div className=\"flex-shrink-0 mt-1\">{getIcon(activity.type)}</div>\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-start justify-between gap-2 mb-1\">\n                  <p className=\"text-sm font-medium\">{activity.title}</p>\n                  <Badge variant=\"outline\" className=\"text-xs flex-shrink-0\">\n                    {getTypeLabel(activity.type)}\n                  </Badge>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">{activity.description}</p>\n                <div className=\"flex items-center justify-between mt-2\">\n                  <span className=\"text-xs text-muted-foreground\">{activity.timestamp}</span>\n                  {activity.amount && (\n                    <span className=\"text-sm font-semibold font-mono text-green-600\">\n                      {activity.amount}\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2817},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/pages/Loans.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plus, Calendar, TrendingUp, Wallet } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { AddLoanModal } from \"@/components/AddLoanModal\";\nimport type { Loan, Borrower } from \"@shared/schema\";\n\nexport default function Loans() {\n  const [addModalOpen, setAddModalOpen] = useState(false);\n\n  const { data: loans = [], isLoading } = useQuery<Loan[]>({\n    queryKey: ['/api/loans'],\n  });\n\n  const { data: borrowers = [] } = useQuery<Borrower[]>({\n    queryKey: ['/api/borrowers'],\n  });\n\n  const getBorrowerName = (borrowerId: string) => {\n    const borrower = borrowers.find(b => b.id === borrowerId);\n    return borrower?.name || 'Unknown';\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return `₹${num.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n  };\n\n  const formatDate = (date: Date | string) => {\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    return dateObj.toLocaleDateString('en-IN', {\n      day: '2-digit',\n      month: 'short',\n      year: 'numeric'\n    });\n  };\n\n  return (\n    <div className=\"p-8 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Loans</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            View and manage all loans\n          </p>\n        </div>\n        <Button onClick={() => setAddModalOpen(true)} data-testid=\"button-add-loan\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Loan\n        </Button>\n      </div>\n\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <Skeleton key={i} className=\"h-64\" data-testid={`skeleton-loan-${i}`} />\n          ))}\n        </div>\n      ) : loans.length === 0 ? (\n        <div className=\"p-12 text-center border rounded-lg\">\n          <Wallet className=\"h-16 w-16 mx-auto mb-4 opacity-50 text-muted-foreground\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No Loans Yet</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            {borrowers.length === 0 \n              ? \"Add a borrower first before creating loans\"\n              : \"Create your first loan to get started\"\n            }\n          </p>\n          <Button \n            onClick={() => setAddModalOpen(true)} \n            disabled={borrowers.length === 0}\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Create Your First Loan\n          </Button>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {loans.map((loan) => (\n            <Card key={loan.id} className=\"hover-elevate\" data-testid={`card-loan-${loan.id}`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <h3 className=\"font-semibold text-lg\" data-testid={`text-borrower-name-${loan.id}`}>\n                      {getBorrowerName(loan.borrowerId)}\n                    </h3>\n                    <Badge \n                      variant={\n                        loan.status === 'active' ? 'default' : \n                        loan.status === 'overdue' ? 'destructive' : \n                        'secondary'\n                      }\n                      className=\"text-xs mt-1\"\n                      data-testid={`badge-loan-status-${loan.id}`}\n                    >\n                      {loan.status}\n                    </Badge>\n                  </div>\n                  <div className=\"h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center\">\n                    <Wallet className=\"h-5 w-5 text-primary\" />\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Principal Amount</p>\n                  <p className=\"text-2xl font-bold\" data-testid={`text-principal-${loan.id}`}>\n                    {formatCurrency(loan.principalAmount)}\n                  </p>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Interest Rate</p>\n                    <div className=\"flex items-center gap-1\">\n                      <TrendingUp className=\"h-4 w-4 text-green-600\" />\n                      <span className=\"font-semibold\" data-testid={`text-interest-rate-${loan.id}`}>\n                        {loan.interestRate}%\n                      </span>\n                    </div>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Rate Type</p>\n                    <p className=\"font-semibold capitalize\" data-testid={`text-interest-rate-type-${loan.id}`}>\n                      {loan.interestRateType}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                  <div>\n                    <span className=\"text-muted-foreground\">Started: </span>\n                    <span data-testid={`text-start-date-${loan.id}`}>{formatDate(loan.startDate)}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      <AddLoanModal open={addModalOpen} onClose={() => setAddModalOpen(false)} />\n    </div>\n  );\n}\n","size_bytes":5979},"client/src/components/examples/AddBorrowerModal.tsx":{"content":"import { useState } from 'react';\nimport { AddBorrowerModal } from '../AddBorrowerModal';\nimport { Button } from '@/components/ui/button';\n\nexport default function AddBorrowerModalExample() {\n  const [open, setOpen] = useState(true);\n\n  return (\n    <div className=\"p-6\">\n      <Button onClick={() => setOpen(true)}>Add Borrower</Button>\n      <AddBorrowerModal\n        open={open}\n        onClose={() => setOpen(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":448},"client/src/components/NotificationPanel.tsx":{"content":"import {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, CheckCircle2, AlertTriangle, Mail, X } from \"lucide-react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Notification {\n  id: string;\n  type: \"payment\" | \"alert\" | \"reminder\" | \"system\";\n  title: string;\n  message: string;\n  timestamp: string;\n  read: boolean;\n}\n\ninterface NotificationPanelProps {\n  notifications: Notification[];\n  onMarkAsRead?: (id: string) => void;\n  onMarkAllAsRead?: () => void;\n  onDismiss?: (id: string) => void;\n}\n\nexport function NotificationPanel({\n  notifications,\n  onMarkAsRead,\n  onMarkAllAsRead,\n  onDismiss,\n}: NotificationPanelProps) {\n  const unreadCount = notifications.filter((n) => !n.read).length;\n\n  const getIcon = (type: Notification[\"type\"]) => {\n    switch (type) {\n      case \"payment\":\n        return <CheckCircle2 className=\"h-4 w-4 text-green-500\" />;\n      case \"alert\":\n        return <AlertTriangle className=\"h-4 w-4 text-red-500\" />;\n      case \"reminder\":\n        return <Mail className=\"h-4 w-4 text-blue-500\" />;\n      default:\n        return <Bell className=\"h-4 w-4 text-muted-foreground\" />;\n    }\n  };\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" className=\"relative\" data-testid=\"button-notifications-trigger\">\n          <Bell className=\"h-5 w-5\" />\n          {unreadCount > 0 && (\n            <Badge className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs\">\n              {unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-96 p-0\">\n        <div className=\"flex items-center justify-between p-4 border-b\">\n          <h3 className=\"font-semibold\">Notifications</h3>\n          {unreadCount > 0 && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onMarkAllAsRead}\n              className=\"text-xs\"\n              data-testid=\"button-mark-all-read\"\n            >\n              Mark all as read\n            </Button>\n          )}\n        </div>\n\n        <ScrollArea className=\"h-96\">\n          {notifications.length === 0 ? (\n            <div className=\"p-8 text-center text-muted-foreground\">\n              <Bell className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n              <p className=\"text-sm\">No notifications</p>\n            </div>\n          ) : (\n            <div className=\"divide-y\">\n              {notifications.map((notification) => (\n                <div\n                  key={notification.id}\n                  className={cn(\n                    \"p-4 hover-elevate cursor-pointer\",\n                    !notification.read && \"bg-muted/50\"\n                  )}\n                  onClick={() => onMarkAsRead?.(notification.id)}\n                  data-testid={`notification-${notification.id}`}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"flex-shrink-0 mt-0.5\">\n                      {getIcon(notification.type)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium\">{notification.title}</p>\n                      <p className=\"text-sm text-muted-foreground mt-0.5\">\n                        {notification.message}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {notification.timestamp}\n                      </p>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"h-6 w-6 flex-shrink-0\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onDismiss?.(notification.id);\n                      }}\n                      data-testid={`button-dismiss-${notification.id}`}\n                    >\n                      <X className=\"h-3.5 w-3.5\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n","size_bytes":4435},"client/src/components/SummaryCard.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SummaryCardProps {\n  title: string;\n  value: string;\n  subValue?: string;\n  trend?: \"up\" | \"down\";\n  trendValue?: string;\n  icon: LucideIcon;\n  iconColor?: string;\n}\n\nexport function SummaryCard({\n  title,\n  value,\n  subValue,\n  trend,\n  trendValue,\n  icon: Icon,\n  iconColor = \"bg-primary\",\n}: SummaryCardProps) {\n  return (\n    <Card data-testid={`card-summary-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between gap-4\">\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-muted-foreground\">{title}</p>\n            <p className=\"text-3xl font-bold font-mono tracking-tight mt-2\">{value}</p>\n            {subValue && (\n              <p className=\"text-sm text-muted-foreground mt-1\">{subValue}</p>\n            )}\n            {trendValue && (\n              <div className=\"flex items-center gap-1 mt-2\">\n                <span\n                  className={cn(\n                    \"text-sm font-medium\",\n                    trend === \"up\" ? \"text-green-600\" : \"text-red-600\"\n                  )}\n                >\n                  {trend === \"up\" ? \"↑\" : \"↓\"} {trendValue}\n                </span>\n                <span className=\"text-xs text-muted-foreground\">vs last month</span>\n              </div>\n            )}\n          </div>\n          <div className={cn(\"h-10 w-10 rounded-full flex items-center justify-center\", iconColor)}>\n            <Icon className=\"h-5 w-5 text-white\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1731},"client/src/components/examples/InterestChart.tsx":{"content":"import { InterestChart } from '../InterestChart';\n\nconst mockData = [\n  { month: 'May', received: 65000, pending: 45000 },\n  { month: 'Jun', received: 72000, pending: 52000 },\n  { month: 'Jul', received: 68000, pending: 48000 },\n  { month: 'Aug', received: 85000, pending: 65000 },\n  { month: 'Sep', received: 92000, pending: 72000 },\n  { month: 'Oct', received: 84000, pending: 68000 },\n];\n\nexport default function InterestChartExample() {\n  return (\n    <div className=\"p-6\">\n      <InterestChart\n        title=\"Interest Trends (Last 6 Months)\"\n        data={mockData}\n        onExport={() => console.log('Export chart')}\n      />\n    </div>\n  );\n}\n","size_bytes":651},"client/src/components/AppSidebar.tsx":{"content":"import { Home, Users, Wallet, TrendingUp, FileText, Settings, Bell, Mail } from \"lucide-react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\n\nconst menuItems = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: Home,\n  },\n  {\n    title: \"Borrowers\",\n    url: \"/borrowers\",\n    icon: Users,\n  },\n  {\n    title: \"Loans\",\n    url: \"/loans\",\n    icon: Wallet,\n  },\n  {\n    title: \"Interest History\",\n    url: \"/interest-history\",\n    icon: TrendingUp,\n  },\n  {\n    title: \"Reports\",\n    url: \"/reports\",\n    icon: FileText,\n  },\n];\n\nconst reminderItems = [\n  {\n    title: \"Reminders\",\n    url: \"/reminders\",\n    icon: Bell,\n  },\n  {\n    title: \"Email Templates\",\n    url: \"/templates\",\n    icon: Mail,\n  },\n];\n\nexport function AppSidebar() {\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Main Menu</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild data-testid={`sidebar-${item.title.toLowerCase()}`}>\n                    <a href={item.url}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </a>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel>Automation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {reminderItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild data-testid={`sidebar-${item.title.toLowerCase()}`}>\n                    <a href={item.url}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </a>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter>\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <SidebarMenuButton asChild data-testid=\"sidebar-settings\">\n              <a href=\"/settings\">\n                <Settings className=\"h-4 w-4\" />\n                <span>Settings</span>\n              </a>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":2743},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\", { length: 255 }).primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => ({\n    expireIndex: index(\"IDX_session_expire\").on(table.expire),\n  }),\n);\n\n// User storage table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: text(\"id\").primaryKey(),\n  email: text(\"email\").unique(),\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  profileImageUrl: text(\"profile_image_url\"),\n  // User preferences for notifications and reminders\n  notificationPreferences: jsonb(\"notification_preferences\").$type<{\n    emailNotifications: boolean;\n    paymentAlerts: boolean;\n    reminderAlerts: boolean;\n    systemAlerts: boolean;\n  }>().default({\n    emailNotifications: true,\n    paymentAlerts: true,\n    reminderAlerts: true,\n    systemAlerts: true,\n  }),\n  interestCalculationMethod: text(\"interest_calculation_method\").default(\"simple\"), // \"simple\" or \"compound\"\n  autoLogoutMinutes: integer(\"auto_logout_minutes\").default(30),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n// Borrowers table\nexport const borrowers = pgTable(\"borrowers\", {\n  id: text(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: text(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\").notNull(),\n  address: text(\"address\"),\n  preferredContactMethod: text(\"preferred_contact_method\").default(\"email\"), // \"email\", \"sms\", \"whatsapp\"\n  notes: text(\"notes\"),\n  status: text(\"status\").default(\"active\"), // \"active\", \"overdue\", \"settled\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertBorrowerSchema = createInsertSchema(borrowers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertBorrower = z.infer<typeof insertBorrowerSchema>;\nexport type Borrower = typeof borrowers.$inferSelect;\n\n// Loans table\nexport const loans = pgTable(\"loans\", {\n  id: text(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  borrowerId: text(\"borrower_id\").notNull().references(() => borrowers.id, { onDelete: \"cascade\" }),\n  userId: text(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  principalAmount: decimal(\"principal_amount\", { precision: 15, scale: 2 }).notNull(),\n  interestRate: decimal(\"interest_rate\", { precision: 5, scale: 2 }).notNull(), // percentage\n  interestRateType: text(\"interest_rate_type\").notNull().default(\"monthly\"), // \"monthly\" or \"annual\"\n  startDate: timestamp(\"start_date\").notNull(),\n  repaymentTerms: text(\"repayment_terms\"),\n  status: text(\"status\").default(\"active\"), // \"active\", \"settled\", \"closed\"\n  documentUrls: text(\"document_urls\").array().default([]), // URLs to uploaded documents as text array\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertLoanSchema = createInsertSchema(loans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertLoan = z.infer<typeof insertLoanSchema>;\nexport type Loan = typeof loans.$inferSelect;\n\n// Payments table\nexport const payments = pgTable(\"payments\", {\n  id: text(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  loanId: text(\"loan_id\").notNull().references(() => loans.id, { onDelete: \"cascade\" }),\n  userId: text(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  paymentDate: timestamp(\"payment_date\").notNull(),\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  paymentType: text(\"payment_type\").notNull(), // \"principal\", \"interest\", \"partial_interest\", \"mixed\"\n  paymentMethod: text(\"payment_method\").notNull(), // \"cash\", \"upi\", \"bank_transfer\", \"cheque\"\n  transactionReference: text(\"transaction_reference\"),\n  receiptUrl: text(\"receipt_url\"),\n  notes: text(\"notes\"),\n  verified: boolean(\"verified\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type Payment = typeof payments.$inferSelect;\n\n// Interest entries table (for automatic monthly interest tracking)\nexport const interestEntries = pgTable(\"interest_entries\", {\n  id: text(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  loanId: text(\"loan_id\").notNull().references(() => loans.id, { onDelete: \"cascade\" }),\n  userId: text(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  borrowerId: text(\"borrower_id\").notNull().references(() => borrowers.id, { onDelete: \"cascade\" }),\n  periodStart: timestamp(\"period_start\").notNull(),\n  periodEnd: timestamp(\"period_end\").notNull(),\n  principalAmount: decimal(\"principal_amount\", { precision: 15, scale: 2 }).notNull(),\n  interestRate: decimal(\"interest_rate\", { precision: 5, scale: 2 }).notNull(),\n  interestAmount: decimal(\"interest_amount\", { precision: 15, scale: 2 }).notNull(),\n  isAutoGenerated: boolean(\"is_auto_generated\").default(true),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertInterestEntrySchema = createInsertSchema(interestEntries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertInterestEntry = z.infer<typeof insertInterestEntrySchema>;\nexport type InterestEntry = typeof interestEntries.$inferSelect;\n\n// Reminders table\nexport const reminders = pgTable(\"reminders\", {\n  id: text(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: text(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  message: text(\"message\").notNull(),\n  borrowerId: text(\"borrower_id\").references(() => borrowers.id, { onDelete: \"cascade\" }),\n  reminderType: text(\"reminder_type\").notNull(), // \"payment\", \"interest\", \"custom\"\n  title: text(\"title\").notNull(),\n  scheduledFor: timestamp(\"scheduled_for\").notNull(),\n  status: text(\"status\").default(\"pending\"), // \"pending\", \"sent\", \"failed\", \"cancelled\"\n  sentAt: timestamp(\"sent_at\"),\n  failureReason: text(\"failure_reason\"),\n  isRecurring: boolean(\"is_recurring\").default(false),\n  metadata: jsonb(\"metadata\").$type<{\n    threshold?: number;\n    daysBeforeDue?: number;\n    escalationLevel?: string;\n  }>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertReminderSchema = createInsertSchema(reminders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertReminder = z.infer<typeof insertReminderSchema>;\nexport type Reminder = typeof reminders.$inferSelect;\n\n// Email logs table\nexport const emailLogs = pgTable(\"email_logs\", {\n  id: text(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: text(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  borrowerId: text(\"borrower_id\").references(() => borrowers.id, { onDelete: \"cascade\" }),\n  loanId: text(\"loan_id\").references(() => loans.id, { onDelete: \"cascade\" }),\n  recipient: text(\"recipient\").notNull(),\n  subject: text(\"subject\").notNull(),\n  body: text(\"body\").notNull(),\n  status: text(\"status\").notNull(), // \"sent\", \"failed\", \"queued\"\n  provider: text(\"provider\"), // \"sendgrid\", \"ses\", etc.\n  sentAt: timestamp(\"sent_at\").defaultNow(),\n  deliveredAt: timestamp(\"delivered_at\"),\n  failureReason: text(\"failure_reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertEmailLogSchema = createInsertSchema(emailLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertEmailLog = z.infer<typeof insertEmailLogSchema>;\nexport type EmailLog = typeof emailLogs.$inferSelect;\n\n// Email templates table\nexport const emailTemplates = pgTable(\"email_templates\", {\n  id: text(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  userId: text(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  type: text(\"type\").notNull(), // \"reminder\", \"receipt\", \"statement\"\n  subject: text(\"subject\").notNull(),\n  htmlBody: text(\"html_body\").notNull(),\n  placeholders: text(\"placeholders\").array().default([]), // {{borrowerName}}, {{amount}}, etc.\n  isDefault: boolean(\"is_default\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertEmailTemplateSchema = createInsertSchema(emailTemplates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertEmailTemplate = z.infer<typeof insertEmailTemplateSchema>;\nexport type EmailTemplate = typeof emailTemplates.$inferSelect;\n\n// Audit logs table\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: text(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: text(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  action: text(\"action\").notNull(), // \"create\", \"update\", \"delete\"\n  entityType: text(\"entity_type\").notNull(), // \"loan\", \"payment\", \"borrower\", etc.\n  entityId: text(\"entity_id\").notNull(),\n  changes: jsonb(\"changes\"), // Store the changes made\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\n","size_bytes":10096},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/AddBorrowerModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\ninterface AddBorrowerModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport function AddBorrowerModal({ open, onClose }: AddBorrowerModalProps) {\n  const { toast } = useToast();\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n  const [contactMethod, setContactMethod] = useState(\"\");\n\n  const createBorrowerMutation = useMutation({\n    mutationFn: async (data: { name: string; email: string; phone: string; address?: string; metadata?: any }) => {\n      const response = await apiRequest(\"POST\", \"/api/borrowers\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Borrower added successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/borrowers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n      resetForm();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add borrower\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setName(\"\");\n    setEmail(\"\");\n    setPhone(\"\");\n    setAddress(\"\");\n    setNotes(\"\");\n    setContactMethod(\"\");\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const metadata: any = {};\n    if (contactMethod) {\n      metadata.preferredContactMethod = contactMethod;\n    }\n    if (notes) {\n      metadata.notes = notes;\n    }\n\n    createBorrowerMutation.mutate({\n      name,\n      email,\n      phone,\n      address: address || undefined,\n      metadata: Object.keys(metadata).length > 0 ? metadata : undefined,\n    });\n  };\n\n  const handleClose = () => {\n    if (!createBorrowerMutation.isPending) {\n      resetForm();\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"modal-add-borrower\">\n        <DialogHeader>\n          <DialogTitle>Add New Borrower</DialogTitle>\n          <DialogDescription>\n            Enter borrower details. Email is required for automated reminders.\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit}>\n          <div className=\"grid gap-6 py-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"borrower-name\">Full Name *</Label>\n                <Input\n                  id=\"borrower-name\"\n                  placeholder=\"Rajesh Kumar\"\n                  required\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                  data-testid=\"input-borrower-name\"\n                  disabled={createBorrowerMutation.isPending}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email Address *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"rajesh@example.com\"\n                  required\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  data-testid=\"input-email\"\n                  disabled={createBorrowerMutation.isPending}\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Phone Number *</Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  placeholder=\"+91 98765 43210\"\n                  required\n                  value={phone}\n                  onChange={(e) => setPhone(e.target.value)}\n                  data-testid=\"input-phone\"\n                  disabled={createBorrowerMutation.isPending}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"contact-method\">Preferred Contact Method</Label>\n                <Select \n                  value={contactMethod} \n                  onValueChange={setContactMethod}\n                  disabled={createBorrowerMutation.isPending}\n                >\n                  <SelectTrigger id=\"contact-method\" data-testid=\"select-contact-method\">\n                    <SelectValue placeholder=\"Select method\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"email\">Email</SelectItem>\n                    <SelectItem value=\"sms\">SMS</SelectItem>\n                    <SelectItem value=\"whatsapp\">WhatsApp</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"address\">Address (Optional)</Label>\n              <Input\n                id=\"address\"\n                placeholder=\"123 Main St, City, State\"\n                value={address}\n                onChange={(e) => setAddress(e.target.value)}\n                data-testid=\"input-address\"\n                disabled={createBorrowerMutation.isPending}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"borrower-notes\">Notes (Optional)</Label>\n              <Textarea\n                id=\"borrower-notes\"\n                placeholder=\"Additional information about the borrower...\"\n                rows={3}\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n                data-testid=\"textarea-borrower-notes\"\n                disabled={createBorrowerMutation.isPending}\n              />\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={handleClose} \n              data-testid=\"button-cancel\"\n              disabled={createBorrowerMutation.isPending}\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              data-testid=\"button-submit-borrower\"\n              disabled={createBorrowerMutation.isPending}\n            >\n              {createBorrowerMutation.isPending ? \"Adding...\" : \"Add Borrower\"}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7157},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/examples/BorrowerCard.tsx":{"content":"import { BorrowerCard } from '../BorrowerCard';\nimport avatar1 from '@assets/generated_images/Professional_male_avatar_headshot_3c69c06f.png';\nimport avatar2 from '@assets/generated_images/Professional_female_avatar_headshot_d7c69081.png';\n\nexport default function BorrowerCardExample() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 p-6\">\n      <BorrowerCard\n        id=\"1\"\n        name=\"Rajesh Kumar\"\n        email=\"rajesh.k@example.com\"\n        phone=\"+91 98765 43210\"\n        avatar={avatar1}\n        totalLent=\"₹15.5L\"\n        outstanding=\"₹12.3L\"\n        pendingInterest=\"₹2.4L\"\n        lastPayment={{ date: \"2024-10-15\", amount: \"₹50,000\" }}\n        daysSincePayment={12}\n        status=\"active\"\n      />\n      <BorrowerCard\n        id=\"2\"\n        name=\"Priya Sharma\"\n        email=\"priya.sharma@example.com\"\n        phone=\"+91 98123 45678\"\n        avatar={avatar2}\n        totalLent=\"₹8.2L\"\n        outstanding=\"₹6.5L\"\n        pendingInterest=\"₹3.2L\"\n        lastPayment={{ date: \"2024-08-20\", amount: \"₹25,000\" }}\n        daysSincePayment={68}\n        status=\"overdue\"\n      />\n    </div>\n  );\n}\n","size_bytes":1145},"client/src/components/examples/SummaryCard.tsx":{"content":"import { SummaryCard } from '../SummaryCard';\nimport { LucideIndianRupee, TrendingUp, Users, Banknote } from \"lucide-react\";\n\nexport default function SummaryCardExample() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6 p-6\">\n      <SummaryCard\n        title=\"Total Amount Lent\"\n        value=\"₹45.2L\"\n        subValue=\"All time\"\n        icon={LucideIndianRupee}\n        iconColor=\"bg-blue-500\"\n      />\n      <SummaryCard\n        title=\"Outstanding Principal\"\n        value=\"₹32.8L\"\n        trend=\"down\"\n        trendValue=\"8.2%\"\n        icon={Banknote}\n        iconColor=\"bg-orange-500\"\n      />\n      <SummaryCard\n        title=\"Interest Received\"\n        value=\"₹8.4L\"\n        trend=\"up\"\n        trendValue=\"12.5%\"\n        icon={TrendingUp}\n        iconColor=\"bg-green-500\"\n      />\n      <SummaryCard\n        title=\"Active Borrowers\"\n        value=\"12\"\n        subValue=\"8 active loans\"\n        icon={Users}\n        iconColor=\"bg-purple-500\"\n      />\n    </div>\n  );\n}\n","size_bytes":1003},"client/src/components/examples/AppSidebar.tsx":{"content":"import { AppSidebar } from '../AppSidebar';\nimport { SidebarProvider } from '@/components/ui/sidebar';\n\nexport default function AppSidebarExample() {\n  return (\n    <SidebarProvider>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex-1 p-6\">\n          <h2 className=\"text-2xl font-bold\">Main Content Area</h2>\n          <p className=\"text-muted-foreground mt-2\">Sidebar navigation example</p>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":497},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"server/reminderService.ts":{"content":"import { storage } from \"./storage\";\nimport { emailService } from \"./emailService\";\nimport type { Reminder, Loan, Borrower, EmailTemplate } from \"@shared/schema\";\n\nexport interface ReminderContext {\n  reminder: Reminder;\n  loan?: Loan;\n  borrower?: Borrower;\n  template?: EmailTemplate;\n}\n\nexport class ReminderService {\n  async processReminder(reminderId: string, userId: string): Promise<boolean> {\n    try {\n      const reminder = await storage.getReminder(reminderId, userId);\n      if (!reminder) {\n        console.error(`Reminder ${reminderId} not found`);\n        return false;\n      }\n\n      // Check if reminder is due\n      if (new Date(reminder.scheduledFor) > new Date()) {\n        console.log(`Reminder ${reminderId} not yet due`);\n        return false;\n      }\n\n      // Check if already sent\n      if (reminder.status === 'sent') {\n        console.log(`Reminder ${reminderId} already sent`);\n        return false;\n      }\n\n      // Get borrower information\n      const borrower = await storage.getBorrower(reminder.borrowerId, userId);\n      if (!borrower) {\n        console.error(`Borrower ${reminder.borrowerId} not found`);\n        return false;\n      }\n\n      // Get loan if specified\n      let loan: Loan | undefined;\n      if (reminder.loanId) {\n        loan = await storage.getLoan(reminder.loanId, userId);\n      }\n\n      // Get email template if specified\n      let template: EmailTemplate | undefined;\n      if (reminder.emailTemplateId) {\n        template = await storage.getEmailTemplate(reminder.emailTemplateId, userId);\n      }\n\n      // Send the reminder email\n      const emailSent = await this.sendReminderEmail({\n        reminder,\n        loan,\n        borrower,\n        template,\n      });\n\n      if (emailSent) {\n        // Mark reminder as sent\n        await storage.updateReminder(reminderId, userId, {\n          status: 'sent',\n        });\n\n        console.log(`✅ Reminder ${reminderId} sent successfully`);\n        return true;\n      } else {\n        // Mark as failed\n        await storage.updateReminder(reminderId, userId, {\n          status: 'failed',\n        });\n        console.error(`❌ Failed to send reminder ${reminderId}`);\n        return false;\n      }\n    } catch (error) {\n      console.error(`Error processing reminder ${reminderId}:`, error);\n      return false;\n    }\n  }\n\n  private async sendReminderEmail(context: ReminderContext): Promise<boolean> {\n    const { reminder, loan, borrower, template } = context;\n\n    if (!borrower || !borrower.email) {\n      console.error(`Borrower ${reminder.borrowerId} has no email address`);\n      return false;\n    }\n\n    try {\n      let result;\n\n      if (template) {\n        // Use template with variable substitution\n        const variables = this.buildTemplateVariables(reminder, loan, borrower);\n        result = await emailService.sendTemplatedEmail(\n          template,\n          borrower.email,\n          variables\n        );\n      } else {\n        // Send basic reminder email\n        const subject = reminder.title;\n        const html = this.buildDefaultEmailHtml(reminder, loan, borrower);\n\n        result = await emailService.sendEmail({\n          to: borrower.email,\n          subject,\n          html,\n        });\n      }\n\n      // Log the email\n      await storage.createEmailLog({\n        userId: reminder.userId,\n        borrowerId: borrower.id,\n        reminderId: reminder.id,\n        recipientEmail: borrower.email,\n        subject: reminder.title,\n        body: template ? template.htmlBody : this.buildDefaultEmailHtml(reminder, loan, borrower),\n        status: result.success ? 'sent' : 'failed',\n        errorMessage: result.error,\n      });\n\n      return result.success;\n    } catch (error) {\n      console.error('Error sending reminder email:', error);\n      \n      // Log the failed email attempt\n      await storage.createEmailLog({\n        userId: reminder.userId,\n        borrowerId: borrower.id,\n        reminderId: reminder.id,\n        recipientEmail: borrower.email,\n        subject: reminder.title,\n        body: 'Email failed to send',\n        status: 'failed',\n        errorMessage: error instanceof Error ? error.message : 'Unknown error',\n      });\n\n      return false;\n    }\n  }\n\n  private buildTemplateVariables(\n    reminder: Reminder,\n    loan: Loan | undefined,\n    borrower: Borrower\n  ): Record<string, string> {\n    const formatCurrency = (amount: string) => {\n      return `₹${parseFloat(amount).toLocaleString('en-IN')}`;\n    };\n\n    const formatDate = (date: Date | string) => {\n      return new Date(date).toLocaleDateString('en-IN', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n      });\n    };\n\n    return {\n      borrowerName: borrower.name,\n      borrowerEmail: borrower.email || '',\n      borrowerPhone: borrower.phone || '',\n      reminderTitle: reminder.title,\n      reminderMessage: reminder.message,\n      scheduledDate: formatDate(reminder.scheduledFor),\n      loanAmount: loan ? formatCurrency(loan.principalAmount) : 'N/A',\n      interestRate: loan ? `${loan.interestRate}%` : 'N/A',\n      loanStartDate: loan ? formatDate(loan.startDate) : 'N/A',\n    };\n  }\n\n  private buildDefaultEmailHtml(\n    reminder: Reminder,\n    loan: Loan | undefined,\n    borrower: Borrower\n  ): string {\n    const formatCurrency = (amount: string) => {\n      return `₹${parseFloat(amount).toLocaleString('en-IN')}`;\n    };\n\n    const formatDate = (date: Date | string) => {\n      return new Date(date).toLocaleDateString('en-IN', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n      });\n    };\n\n    let html = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <style>\n          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%); color: white; padding: 30px; border-radius: 8px 8px 0 0; text-align: center; }\n          .content { background: #ffffff; padding: 30px; border: 1px solid #e5e7eb; border-top: none; border-radius: 0 0 8px 8px; }\n          .message { background: #f3f4f6; padding: 20px; border-left: 4px solid #3B82F6; margin: 20px 0; border-radius: 4px; }\n          .details { margin: 20px 0; }\n          .detail-row { display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #e5e7eb; }\n          .detail-label { font-weight: 600; color: #6b7280; }\n          .detail-value { color: #111827; }\n          .footer { text-align: center; color: #6b7280; font-size: 14px; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1 style=\"margin: 0; font-size: 28px;\">Payment Reminder</h1>\n        </div>\n        <div class=\"content\">\n          <p>Dear ${borrower.name},</p>\n          <div class=\"message\">\n            <p style=\"margin: 0; font-size: 16px;\"><strong>${reminder.title}</strong></p>\n            <p style=\"margin: 10px 0 0 0;\">${reminder.message}</p>\n          </div>\n    `;\n\n    if (loan) {\n      html += `\n          <div class=\"details\">\n            <h3 style=\"color: #111827; margin-bottom: 15px;\">Loan Details</h3>\n            <div class=\"detail-row\">\n              <span class=\"detail-label\">Principal Amount:</span>\n              <span class=\"detail-value\">${formatCurrency(loan.principalAmount)}</span>\n            </div>\n            <div class=\"detail-row\">\n              <span class=\"detail-label\">Interest Rate:</span>\n              <span class=\"detail-value\">${loan.interestRate}% ${loan.interestRateType}</span>\n            </div>\n            <div class=\"detail-row\">\n              <span class=\"detail-label\">Loan Start Date:</span>\n              <span class=\"detail-value\">${formatDate(loan.startDate)}</span>\n            </div>\n          </div>\n      `;\n    }\n\n    html += `\n          <p style=\"margin-top: 30px;\">If you have any questions or concerns, please don't hesitate to contact us.</p>\n          <p>Best regards,<br>LendingPro Team</p>\n        </div>\n        <div class=\"footer\">\n          <p>This is an automated reminder from your Lending Management System.</p>\n          <p style=\"margin-top: 10px; font-size: 12px;\">Scheduled for: ${formatDate(reminder.scheduledFor)}</p>\n        </div>\n      </body>\n      </html>\n    `;\n\n    return html;\n  }\n\n  async processPendingReminders(userId: string): Promise<number> {\n    try {\n      const reminders = await storage.getReminders(userId);\n      const pendingReminders = reminders.filter(r => \n        r.status === 'pending' && new Date(r.scheduledFor) <= new Date()\n      );\n\n      let successCount = 0;\n      for (const reminder of pendingReminders) {\n        const success = await this.processReminder(reminder.id, userId);\n        if (success) successCount++;\n      }\n\n      return successCount;\n    } catch (error) {\n      console.error('Error processing pending reminders:', error);\n      return 0;\n    }\n  }\n}\n\nexport const reminderService = new ReminderService();\n","size_bytes":9205},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/BorrowerCard.tsx":{"content":"import { Phone, Mail, Eye, Plus, Send, Clock } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\n\ninterface BorrowerCardProps {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  avatar?: string;\n  totalLent: string;\n  outstanding: string;\n  pendingInterest: string;\n  lastPayment?: {\n    date: string;\n    amount: string;\n  };\n  daysSincePayment: number;\n  status: \"active\" | \"overdue\" | \"settled\";\n  onViewDetails?: (borrowerId: string) => void;\n  onAddPayment?: (borrowerId: string) => void;\n  onSendReminder?: (borrowerId: string) => void;\n}\n\nexport function BorrowerCard({\n  id,\n  name,\n  email,\n  phone,\n  avatar,\n  totalLent,\n  outstanding,\n  pendingInterest,\n  lastPayment,\n  daysSincePayment,\n  status,\n  onViewDetails,\n  onAddPayment,\n  onSendReminder,\n}: BorrowerCardProps) {\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getStatusColor = () => {\n    switch (status) {\n      case \"overdue\":\n        return \"bg-red-500\";\n      case \"settled\":\n        return \"bg-green-500\";\n      default:\n        return \"bg-blue-500\";\n    }\n  };\n\n  return (\n    <Card className=\"hover-elevate\" data-testid={`card-borrower-${id}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start gap-4\">\n          <Avatar className=\"h-12 w-12\">\n            <AvatarImage src={avatar} alt={name} />\n            <AvatarFallback className=\"bg-primary text-primary-foreground\">\n              {getInitials(name)}\n            </AvatarFallback>\n          </Avatar>\n\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between gap-2 mb-2\">\n              <div>\n                <h3 className=\"text-lg font-semibold\">{name}</h3>\n                <div className=\"flex flex-col gap-0.5 text-sm text-muted-foreground mt-1\">\n                  <div className=\"flex items-center gap-1.5\">\n                    <Mail className=\"h-3.5 w-3.5\" />\n                    <span className=\"truncate\">{email}</span>\n                  </div>\n                  <div className=\"flex items-center gap-1.5\">\n                    <Phone className=\"h-3.5 w-3.5\" />\n                    <span>{phone}</span>\n                  </div>\n                </div>\n              </div>\n              <Badge className={cn(\"text-xs\", getStatusColor())}>\n                {status.toUpperCase()}\n              </Badge>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4 my-4 p-4 bg-muted rounded-md\">\n              <div>\n                <p className=\"text-xs text-muted-foreground\">Total Lent</p>\n                <p className=\"text-base font-semibold font-mono\">{totalLent}</p>\n              </div>\n              <div>\n                <p className=\"text-xs text-muted-foreground\">Outstanding</p>\n                <p className=\"text-base font-semibold font-mono text-orange-600\">{outstanding}</p>\n              </div>\n              <div>\n                <p className=\"text-xs text-muted-foreground\">Pending Interest</p>\n                <p className=\"text-base font-semibold font-mono text-red-600\">{pendingInterest}</p>\n              </div>\n              <div>\n                <p className=\"text-xs text-muted-foreground\">Last Payment</p>\n                {lastPayment ? (\n                  <>\n                    <p className=\"text-base font-semibold font-mono\">{lastPayment.amount}</p>\n                    <div className=\"flex items-center gap-1 mt-0.5\">\n                      <Clock className=\"h-3 w-3 text-muted-foreground\" />\n                      <span className=\"text-xs text-muted-foreground\">\n                        {daysSincePayment} days ago\n                      </span>\n                    </div>\n                  </>\n                ) : (\n                  <p className=\"text-sm text-muted-foreground\">No payments yet</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex gap-2\">\n              <Button \n                size=\"sm\" \n                variant=\"outline\" \n                onClick={() => onViewDetails?.(id)}\n                data-testid={`button-view-${id}`}\n              >\n                <Eye className=\"h-4 w-4 mr-1.5\" />\n                View Details\n              </Button>\n              <Button \n                size=\"sm\" \n                onClick={() => onAddPayment?.(id)}\n                data-testid={`button-add-payment-${id}`}\n              >\n                <Plus className=\"h-4 w-4 mr-1.5\" />\n                Add Payment\n              </Button>\n              <Button \n                size=\"sm\" \n                variant=\"secondary\" \n                onClick={() => onSendReminder?.(id)}\n                data-testid={`button-send-reminder-${id}`}\n              >\n                <Send className=\"h-4 w-4 mr-1.5\" />\n                Send Reminder\n              </Button>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5225},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/AppSidebar\";\nimport { DashboardHeader } from \"@/components/DashboardHeader\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Landing from \"@/pages/Landing\";\nimport Borrowers from \"@/pages/Borrowers\";\nimport Loans from \"@/pages/Loans\";\nimport InterestHistory from \"@/pages/InterestHistory\";\nimport Reports from \"@/pages/Reports\";\nimport Reminders from \"@/pages/Reminders\";\nimport EmailTemplates from \"@/pages/EmailTemplates\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"h-8 w-8 animate-spin rounded-full border-4 border-primary border-t-transparent mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/borrowers\" component={Borrowers} />\n          <Route path=\"/loans\" component={Loans} />\n          <Route path=\"/interest-history\" component={InterestHistory} />\n          <Route path=\"/reports\" component={Reports} />\n          <Route path=\"/reminders\" component={Reminders} />\n          <Route path=\"/templates\" component={EmailTemplates} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AuthenticatedLayout({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated, isLoading } = useAuth();\n  const sidebarStyle = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  if (isAuthenticated && !isLoading) {\n    return (\n      <SidebarProvider style={sidebarStyle as React.CSSProperties}>\n        <div className=\"flex h-screen w-full\">\n          <AppSidebar />\n          <div className=\"flex flex-col flex-1 overflow-hidden\">\n            <DashboardHeader />\n            <main className=\"flex-1 overflow-y-auto\">\n              {children}\n            </main>\n          </div>\n        </div>\n      </SidebarProvider>\n    );\n  }\n\n  return <>{children}</>;\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <AuthenticatedLayout>\n            <Router />\n          </AuthenticatedLayout>\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3040},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/AddLoanModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { Borrower } from \"@shared/schema\";\n\ninterface AddLoanModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport function AddLoanModal({ open, onClose }: AddLoanModalProps) {\n  const { toast } = useToast();\n  const [borrowerId, setBorrowerId] = useState(\"\");\n  const [principalAmount, setPrincipalAmount] = useState(\"\");\n  const [interestRate, setInterestRate] = useState(\"\");\n  const [interestRateType, setInterestRateType] = useState(\"monthly\");\n  const [startDate, setStartDate] = useState(\"\");\n\n  const { data: borrowers = [] } = useQuery<Borrower[]>({\n    queryKey: ['/api/borrowers'],\n  });\n\n  useEffect(() => {\n    if (open) {\n      const today = new Date().toISOString().split('T')[0];\n      setStartDate(today);\n    }\n  }, [open]);\n\n  const createLoanMutation = useMutation({\n    mutationFn: async (data: {\n      borrowerId: string;\n      principalAmount: string;\n      interestRate: string;\n      interestRateType: string;\n      startDate: string;\n    }) => {\n      const response = await apiRequest(\"POST\", \"/api/loans\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Loan created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/loans'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n      resetForm();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create loan\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setBorrowerId(\"\");\n    setPrincipalAmount(\"\");\n    setInterestRate(\"\");\n    setInterestRateType(\"monthly\");\n    const today = new Date().toISOString().split('T')[0];\n    setStartDate(today);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!borrowerId) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a borrower\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createLoanMutation.mutate({\n      borrowerId,\n      principalAmount,\n      interestRate,\n      interestRateType,\n      startDate,\n    });\n  };\n\n  const handleClose = () => {\n    if (!createLoanMutation.isPending) {\n      resetForm();\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"modal-add-loan\">\n        <DialogHeader>\n          <DialogTitle>Create New Loan</DialogTitle>\n          <DialogDescription>\n            Enter loan details for the borrower\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit}>\n          <div className=\"grid gap-6 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"borrower\">Select Borrower *</Label>\n              <Select \n                value={borrowerId} \n                onValueChange={setBorrowerId}\n                disabled={createLoanMutation.isPending || borrowers.length === 0}\n              >\n                <SelectTrigger id=\"borrower\" data-testid=\"select-borrower\">\n                  <SelectValue placeholder={borrowers.length === 0 ? \"No borrowers available\" : \"Select a borrower\"} />\n                </SelectTrigger>\n                <SelectContent>\n                  {borrowers.map((borrower) => (\n                    <SelectItem key={borrower.id} value={String(borrower.id)}>\n                      {borrower.name} ({borrower.email})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {borrowers.length === 0 && (\n                <p className=\"text-sm text-muted-foreground\">\n                  Please add a borrower first before creating a loan\n                </p>\n              )}\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"principal\">Principal Amount (₹) *</Label>\n                <Input\n                  id=\"principal\"\n                  type=\"number\"\n                  placeholder=\"100000\"\n                  required\n                  min=\"1\"\n                  step=\"0.01\"\n                  value={principalAmount}\n                  onChange={(e) => setPrincipalAmount(e.target.value)}\n                  data-testid=\"input-principal-amount\"\n                  disabled={createLoanMutation.isPending}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"interest-rate\">Interest Rate (%) *</Label>\n                <Input\n                  id=\"interest-rate\"\n                  type=\"number\"\n                  placeholder=\"12.5\"\n                  required\n                  min=\"0\"\n                  max=\"100\"\n                  step=\"0.01\"\n                  value={interestRate}\n                  onChange={(e) => setInterestRate(e.target.value)}\n                  data-testid=\"input-interest-rate\"\n                  disabled={createLoanMutation.isPending}\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"interest-rate-type\">Interest Rate Type *</Label>\n                <Select \n                  value={interestRateType} \n                  onValueChange={setInterestRateType}\n                  disabled={createLoanMutation.isPending}\n                >\n                  <SelectTrigger id=\"interest-rate-type\" data-testid=\"select-interest-rate-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"monthly\">Monthly</SelectItem>\n                    <SelectItem value=\"annual\">Annual</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"start-date\">Start Date *</Label>\n                <Input\n                  id=\"start-date\"\n                  type=\"date\"\n                  required\n                  value={startDate}\n                  onChange={(e) => setStartDate(e.target.value)}\n                  data-testid=\"input-start-date\"\n                  disabled={createLoanMutation.isPending}\n                />\n              </div>\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={handleClose} \n              data-testid=\"button-cancel\"\n              disabled={createLoanMutation.isPending}\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              data-testid=\"button-submit-loan\"\n              disabled={createLoanMutation.isPending || borrowers.length === 0}\n            >\n              {createLoanMutation.isPending ? \"Creating...\" : \"Create Loan\"}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7729},"server/reminderSchedulerService.ts":{"content":"import { db } from './db';\nimport { users, loans, borrowers, interestEntries, emailLogs } from '@shared/schema';\nimport { eq, and, gte, lte, sql } from 'drizzle-orm';\nimport { generateMonthlyInterestEntries } from './interestCalculationService';\n\n// Track if scheduler is running\nlet schedulerInterval: NodeJS.Timeout | null = null;\nlet isRunning = false;\n\n/**\n * Email service interface (will use Replit integration when setup)\n */\nexport interface EmailService {\n  sendEmail(to: string, subject: string, html: string): Promise<void>;\n}\n\n// Mock email service for development\nclass MockEmailService implements EmailService {\n  async sendEmail(to: string, subject: string, html: string): Promise<void> {\n    console.log('📧 [MOCK EMAIL] Sending email to:', to);\n    console.log('Subject:', subject);\n    console.log('Body preview:', html.substring(0, 200) + '...');\n    \n    // Log to database\n    await db.insert(emailLogs).values({\n      userId: 'system',\n      recipientEmail: to,\n      subject,\n      body: html,\n      status: 'sent',\n    });\n  }\n}\n\nlet emailService: EmailService = new MockEmailService();\n\n/**\n * Set the email service (for integration setup)\n */\nexport function setEmailService(service: EmailService) {\n  emailService = service;\n}\n\n/**\n * Generate monthly interest summary email HTML\n */\nfunction generateMonthlyInterestEmail(\n  lenderName: string,\n  interestSummary: {\n    borrowerName: string;\n    principalAmount: string;\n    interestRate: string;\n    interestAmount: string;\n    periodStart: Date;\n    periodEnd: Date;\n  }[]\n): string {\n  const totalInterest = interestSummary.reduce(\n    (sum, item) => sum + parseFloat(item.interestAmount),\n    0\n  );\n\n  const formatCurrency = (amount: string | number) => {\n    const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return `₹${num.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n  };\n\n  const formatDate = (date: Date) => {\n    return date.toLocaleDateString('en-IN', {\n      day: '2-digit',\n      month: 'short',\n      year: 'numeric'\n    });\n  };\n\n  return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n        .header { background-color: #4F46E5; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }\n        .content { background-color: #f9fafb; padding: 20px; border-radius: 0 0 8px 8px; }\n        .summary { background-color: white; padding: 15px; border-radius: 8px; margin: 20px 0; }\n        .loan-item { padding: 15px; border-bottom: 1px solid #e5e7eb; }\n        .loan-item:last-child { border-bottom: none; }\n        .total { background-color: #4F46E5; color: white; padding: 15px; text-align: center; font-size: 18px; font-weight: bold; border-radius: 8px; margin-top: 20px; }\n        .footer { text-align: center; color: #6b7280; font-size: 12px; margin-top: 30px; }\n        h2 { margin: 0 0 10px 0; }\n        .label { color: #6b7280; font-size: 14px; }\n        .value { font-weight: bold; color: #111827; }\n      </style>\n    </head>\n    <body>\n      <div class=\"header\">\n        <h1>📊 Monthly Interest Summary</h1>\n        <p>Your lending portfolio update for ${formatDate(new Date())}</p>\n      </div>\n      \n      <div class=\"content\">\n        <p>Hello ${lenderName},</p>\n        <p>Here's your monthly interest summary for all active loans:</p>\n        \n        <div class=\"summary\">\n          ${interestSummary.map(item => `\n            <div class=\"loan-item\">\n              <h3 style=\"margin: 0 0 10px 0; color: #111827;\">${item.borrowerName}</h3>\n              <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 10px;\">\n                <div>\n                  <div class=\"label\">Principal Amount</div>\n                  <div class=\"value\">${formatCurrency(item.principalAmount)}</div>\n                </div>\n                <div>\n                  <div class=\"label\">Interest Rate</div>\n                  <div class=\"value\">${item.interestRate}%</div>\n                </div>\n                <div>\n                  <div class=\"label\">Period</div>\n                  <div class=\"value\">${formatDate(item.periodStart)} - ${formatDate(item.periodEnd)}</div>\n                </div>\n                <div>\n                  <div class=\"label\">Interest Earned</div>\n                  <div class=\"value\" style=\"color: #059669;\">${formatCurrency(item.interestAmount)}</div>\n                </div>\n              </div>\n            </div>\n          `).join('')}\n        </div>\n        \n        <div class=\"total\">\n          Total Interest This Month: ${formatCurrency(totalInterest)}\n        </div>\n        \n        <p style=\"margin-top: 30px; color: #6b7280;\">\n          This is an automated monthly summary of your lending activity. \n          Login to your dashboard to view detailed transaction history.\n        </p>\n      </div>\n      \n      <div class=\"footer\">\n        <p>This is an automated email from your Lending Management System</p>\n        <p>© ${new Date().getFullYear()} Lending Management. All rights reserved.</p>\n      </div>\n    </body>\n    </html>\n  `;\n}\n\n/**\n * Send monthly interest summary emails to all lenders\n */\nexport async function sendMonthlyInterestReminders(): Promise<number> {\n  try {\n    console.log('🔔 Starting monthly interest reminder process...');\n    \n    // First, generate interest entries for this month\n    const { created, calculations } = await generateMonthlyInterestEntries();\n    console.log(`Generated ${created} new interest entries`);\n\n    // Get all users with active loans\n    const allUsers = await db\n      .select({\n        userId: users.id,\n        email: users.email,\n      })\n      .from(users)\n      .innerJoin(loans, eq(loans.userId, users.id))\n      .where(eq(loans.status, 'active'))\n      .groupBy(users.id, users.email);\n\n    let emailsSent = 0;\n\n    for (const user of allUsers) {\n      // Get this month's interest entries for this user\n      const currentMonth = new Date();\n      const monthStart = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n      const monthEnd = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n\n      const userInterestEntries = await db\n        .select({\n          borrowerName: borrowers.name,\n          principalAmount: interestEntries.principalAmount,\n          interestRate: interestEntries.interestRate,\n          interestAmount: interestEntries.interestAmount,\n          periodStart: interestEntries.periodStart,\n          periodEnd: interestEntries.periodEnd,\n        })\n        .from(interestEntries)\n        .innerJoin(borrowers, eq(interestEntries.borrowerId, borrowers.id))\n        .where(\n          and(\n            eq(interestEntries.userId, user.userId),\n            gte(interestEntries.periodStart, monthStart),\n            lte(interestEntries.periodStart, monthEnd)\n          )\n        );\n\n      if (userInterestEntries.length === 0) {\n        console.log(`No interest entries for user ${user.email} this month`);\n        continue;\n      }\n\n      // Send email\n      const emailHtml = generateMonthlyInterestEmail(\n        'Lender',\n        userInterestEntries\n      );\n\n      await emailService.sendEmail(\n        user.email || '',\n        `💰 Monthly Interest Summary - ${new Date().toLocaleDateString('en-IN', { month: 'long', year: 'numeric' })}`,\n        emailHtml\n      );\n\n      emailsSent++;\n      console.log(`✅ Sent monthly interest summary to ${user.email}`);\n    }\n\n    console.log(`📧 Sent ${emailsSent} monthly interest reminder emails`);\n    return emailsSent;\n  } catch (error) {\n    console.error('❌ Error sending monthly interest reminders:', error);\n    throw error;\n  }\n}\n\n/**\n * Check if it's the first day of the month and send reminders\n */\nasync function checkAndSendMonthlyReminders() {\n  const today = new Date();\n  const dayOfMonth = today.getDate();\n  \n  // Run on the 1st of every month\n  if (dayOfMonth === 1) {\n    console.log('📅 First day of the month - triggering interest calculations and reminders');\n    try {\n      await sendMonthlyInterestReminders();\n    } catch (error) {\n      console.error('Failed to send monthly reminders:', error);\n    }\n  }\n}\n\n/**\n * Start the scheduler (checks daily)\n */\nexport function startReminderScheduler() {\n  if (isRunning) {\n    console.log('⚠️  Reminder scheduler already running');\n    return;\n  }\n\n  console.log('🚀 Starting reminder scheduler...');\n  isRunning = true;\n\n  // Run immediately on startup (if it's the first day)\n  checkAndSendMonthlyReminders();\n\n  // Check every 24 hours\n  schedulerInterval = setInterval(() => {\n    checkAndSendMonthlyReminders();\n  }, 24 * 60 * 60 * 1000); // 24 hours\n\n  console.log('✅ Reminder scheduler started - will check daily for monthly reminders');\n}\n\n/**\n * Stop the scheduler\n */\nexport function stopReminderScheduler() {\n  if (schedulerInterval) {\n    clearInterval(schedulerInterval);\n    schedulerInterval = null;\n    isRunning = false;\n    console.log('🛑 Reminder scheduler stopped');\n  }\n}\n\n/**\n * Get scheduler status\n */\nexport function getSchedulerStatus() {\n  return {\n    isRunning,\n    nextCheck: isRunning ? 'Within 24 hours' : 'Not scheduled',\n  };\n}\n","size_bytes":9294},"server/interestCalculationService.ts":{"content":"import { db } from './db';\nimport { loans, interestEntries, borrowers } from '@shared/schema';\nimport { eq, and, sql } from 'drizzle-orm';\n\nexport interface InterestCalculation {\n  loanId: string;\n  borrowerId: string;\n  userId: string;\n  periodStart: Date;\n  periodEnd: Date;\n  principalAmount: string;\n  interestRate: string;\n  interestRateType: string;\n  interestAmount: string;\n}\n\n/**\n * Safely add months to a date, handling end-of-month edge cases\n * For example: Jan 31 + 1 month = Feb 28/29 (not Mar 3)\n */\nfunction addMonthsSafe(date: Date, monthsToAdd: number): Date {\n  const result = new Date(date);\n  const originalDay = result.getDate();\n  \n  // Add the months\n  result.setMonth(result.getMonth() + monthsToAdd);\n  \n  // If the day changed (overflow), set to last day of target month\n  if (result.getDate() !== originalDay) {\n    // Go to the 0th day of next month (which is last day of current month)\n    result.setDate(0);\n  }\n  \n  return result;\n}\n\n/**\n * Calculate monthly interest for a single loan\n */\nexport function calculateMonthlyInterest(\n  principalAmount: number,\n  annualInterestRate: number,\n  interestRateType: 'monthly' | 'annual'\n): number {\n  if (interestRateType === 'monthly') {\n    // Monthly rate is already monthly\n    return principalAmount * (annualInterestRate / 100);\n  } else {\n    // Annual rate needs to be divided by 12\n    return principalAmount * (annualInterestRate / 100 / 12);\n  }\n}\n\n/**\n * Get all active loans that need interest entries for a specific month\n */\nexport async function getLoansNeedingInterestCalculation(\n  targetMonth: Date\n): Promise<InterestCalculation[]> {\n  try {\n    const activeLoans = await db\n      .select()\n      .from(loans)\n      .where(eq(loans.status, 'active'));\n\n    const calculations: InterestCalculation[] = [];\n\n    for (const loan of activeLoans) {\n      const startDate = new Date(loan.startDate);\n      const currentDate = new Date();\n      \n      // Calculate which month period we should be calculating\n      const monthsSinceStart = \n        (targetMonth.getFullYear() - startDate.getFullYear()) * 12 +\n        (targetMonth.getMonth() - startDate.getMonth());\n      \n      // Skip if this month is before the loan start date\n      if (monthsSinceStart < 0) continue;\n      \n      // Use safe month addition to avoid skipping months for 29th-31st dates\n      const periodStart = addMonthsSafe(startDate, monthsSinceStart);\n      const periodEnd = addMonthsSafe(startDate, monthsSinceStart + 1);\n      \n      // Check if we already have an entry for this period\n      const existingEntry = await db\n        .select()\n        .from(interestEntries)\n        .where(\n          and(\n            eq(interestEntries.loanId, loan.id),\n            eq(interestEntries.periodStart, periodStart)\n          )\n        )\n        .limit(1);\n\n      // Skip if entry already exists for this period\n      if (existingEntry.length > 0) continue;\n\n      const principal = parseFloat(loan.principalAmount);\n      const rate = parseFloat(loan.interestRate);\n      const interestAmount = calculateMonthlyInterest(\n        principal,\n        rate,\n        loan.interestRateType as 'monthly' | 'annual'\n      );\n\n      calculations.push({\n        loanId: loan.id,\n        borrowerId: loan.borrowerId,\n        userId: loan.userId,\n        periodStart,\n        periodEnd,\n        principalAmount: loan.principalAmount,\n        interestRate: loan.interestRate,\n        interestRateType: loan.interestRateType,\n        interestAmount: interestAmount.toFixed(2),\n      });\n    }\n\n    return calculations;\n  } catch (error) {\n    console.error('Error getting loans for interest calculation:', error);\n    throw error;\n  }\n}\n\n/**\n * Create interest entries for all loans that need them\n */\nexport async function generateMonthlyInterestEntries(\n  targetMonth?: Date\n): Promise<{ created: number; calculations: InterestCalculation[] }> {\n  const month = targetMonth || new Date();\n  \n  try {\n    const calculations = await getLoansNeedingInterestCalculation(month);\n    \n    if (calculations.length === 0) {\n      console.log('No interest entries needed for', month.toISOString());\n      return { created: 0, calculations: [] };\n    }\n\n    // Insert all interest entries\n    for (const calc of calculations) {\n      await db.insert(interestEntries).values({\n        loanId: calc.loanId,\n        userId: calc.userId,\n        borrowerId: calc.borrowerId,\n        periodStart: calc.periodStart,\n        periodEnd: calc.periodEnd,\n        principalAmount: calc.principalAmount,\n        interestRate: calc.interestRate,\n        interestAmount: calc.interestAmount,\n        isAutoGenerated: true,\n        notes: `Auto-generated interest for period ${calc.periodStart.toISOString().split('T')[0]} to ${calc.periodEnd.toISOString().split('T')[0]}`,\n      });\n    }\n\n    console.log(`✅ Created ${calculations.length} interest entries for ${month.toISOString().split('T')[0]}`);\n    return { created: calculations.length, calculations };\n  } catch (error) {\n    console.error('Error generating monthly interest entries:', error);\n    throw error;\n  }\n}\n\n/**\n * Get interest history for a specific loan\n */\nexport async function getInterestHistory(loanId: string) {\n  try {\n    const entries = await db\n      .select()\n      .from(interestEntries)\n      .where(eq(interestEntries.loanId, loanId))\n      .orderBy(sql`${interestEntries.periodStart} DESC`);\n\n    return entries;\n  } catch (error) {\n    console.error('Error fetching interest history:', error);\n    throw error;\n  }\n}\n\n/**\n * Get all interest entries for a user\n */\nexport async function getUserInterestEntries(userId: string) {\n  try {\n    const entries = await db\n      .select({\n        id: interestEntries.id,\n        loanId: interestEntries.loanId,\n        borrowerId: interestEntries.borrowerId,\n        borrowerName: borrowers.name,\n        periodStart: interestEntries.periodStart,\n        periodEnd: interestEntries.periodEnd,\n        principalAmount: interestEntries.principalAmount,\n        interestRate: interestEntries.interestRate,\n        interestAmount: interestEntries.interestAmount,\n        isAutoGenerated: interestEntries.isAutoGenerated,\n        notes: interestEntries.notes,\n        createdAt: interestEntries.createdAt,\n      })\n      .from(interestEntries)\n      .leftJoin(borrowers, eq(interestEntries.borrowerId, borrowers.id))\n      .where(eq(interestEntries.userId, userId))\n      .orderBy(sql`${interestEntries.periodStart} DESC`);\n\n    return entries;\n  } catch (error) {\n    console.error('Error fetching user interest entries:', error);\n    throw error;\n  }\n}\n\n/**\n * Calculate total outstanding interest for a loan\n */\nexport async function calculateOutstandingInterest(loanId: string): Promise<number> {\n  try {\n    const result = await db\n      .select({\n        total: sql<number>`COALESCE(SUM(CAST(${interestEntries.interestAmount} AS NUMERIC)), 0)`,\n      })\n      .from(interestEntries)\n      .where(eq(interestEntries.loanId, loanId));\n\n    return result[0]?.total || 0;\n  } catch (error) {\n    console.error('Error calculating outstanding interest:', error);\n    return 0;\n  }\n}\n\n/**\n * Generate all historical interest entries for a loan from its start date to now\n * This is called when a loan is created with a historical start date\n */\nexport async function generateHistoricalInterestEntries(\n  loanId: string,\n  userId: string,\n  borrowerId: string,\n  startDate: Date,\n  principalAmount: string,\n  interestRate: string,\n  interestRateType: 'monthly' | 'annual'\n): Promise<{ created: number; entries: any[] }> {\n  try {\n    const now = new Date();\n    const loanStartDate = new Date(startDate);\n    const entries = [];\n    \n    // Calculate number of months between start date and now\n    const monthsDiff = \n      (now.getFullYear() - loanStartDate.getFullYear()) * 12 +\n      (now.getMonth() - loanStartDate.getMonth());\n\n    console.log(`📊 Generating historical interest entries for loan ${loanId}: ${monthsDiff + 1} months`);\n\n    // Generate an interest entry for each month from start to now\n    for (let i = 0; i <= monthsDiff; i++) {\n      // Use safe month addition to avoid skipping months for 29th-31st dates\n      const periodStart = addMonthsSafe(loanStartDate, i);\n      const periodEnd = addMonthsSafe(loanStartDate, i + 1);\n      \n      // Check if entry already exists for this period\n      const existingEntry = await db\n        .select()\n        .from(interestEntries)\n        .where(\n          and(\n            eq(interestEntries.loanId, loanId),\n            eq(interestEntries.periodStart, periodStart)\n          )\n        )\n        .limit(1);\n\n      // Skip if entry already exists\n      if (existingEntry.length > 0) {\n        console.log(`⏭️  Entry already exists for period ${periodStart.toISOString().split('T')[0]}`);\n        continue;\n      }\n\n      const principal = parseFloat(principalAmount);\n      const rate = parseFloat(interestRate);\n      const interestAmount = calculateMonthlyInterest(principal, rate, interestRateType);\n\n      // Create the interest entry\n      const entry = await db.insert(interestEntries).values({\n        loanId,\n        userId,\n        borrowerId,\n        periodStart,\n        periodEnd,\n        principalAmount,\n        interestRate,\n        interestAmount: interestAmount.toFixed(2),\n        isAutoGenerated: true,\n        notes: `Auto-generated ${interestRateType} interest for period ${periodStart.toISOString().split('T')[0]} to ${periodEnd.toISOString().split('T')[0]}`,\n      }).returning();\n\n      entries.push(entry[0]);\n      console.log(`✅ Created interest entry: ${periodStart.toISOString().split('T')[0]} - ₹${interestAmount.toFixed(2)}`);\n    }\n\n    console.log(`🎉 Successfully created ${entries.length} historical interest entries`);\n    return { created: entries.length, entries };\n  } catch (error) {\n    console.error('Error generating historical interest entries:', error);\n    throw error;\n  }\n}\n","size_bytes":9951},"MYSQL_MIGRATION.md":{"content":"# MySQL Migration Guide\n\nThis application has been converted from PostgreSQL to MySQL for consistency with your local development environment.\n\n## ✅ What's Been Done\n\n1. **✓ Installed MySQL driver** (`mysql2` package)\n2. **✓ Converted database schema** from PostgreSQL to MySQL syntax\n   - Changed from `pgTable` to `mysqlTable`\n   - Converted `jsonb` to `json`\n   - Updated UUID handling for MySQL\n   - Converted array types to JSON arrays\n3. **✓ Updated database connection** (`server/db.ts`) to use MySQL\n4. **✓ Removed PostgreSQL dependencies** (`@neondatabase/serverless`)\n\n## 📋 What You Need to Do\n\n### Step 1: Update `drizzle.config.ts`\n\n**Manually edit** the `drizzle.config.ts` file and change the dialect from `postgresql` to `mysql`:\n\n```typescript\nimport { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL must be set. Please provide your MySQL connection string.\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"mysql\",  // ← Change this from \"postgresql\" to \"mysql\"\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n```\n\n### Step 2: Set MySQL Connection String\n\nYou need to provide your MySQL database connection URL. The format is:\n\n```\nmysql://username:password@host:port/database_name\n```\n\n**Example:**\n```\nmysql://root:mypassword@localhost:3306/lending_app\n```\n\n**For Replit Secrets:**\n1. Click the **Secrets** tab (lock icon in sidebar)\n2. Create a new secret named `DATABASE_URL`\n3. Set the value to your MySQL connection string\n\n**For Local Development:**\nCreate a `.env` file in the root directory:\n```env\nDATABASE_URL=mysql://root:yourpassword@localhost:3306/lending_app\n```\n\n### Step 3: Create MySQL Database\n\nMake sure your MySQL database exists. Connect to MySQL and run:\n\n```sql\nCREATE DATABASE lending_app CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n```\n\n### Step 4: Push Schema to MySQL\n\nOnce you've set up the `DATABASE_URL`, push the schema to your MySQL database:\n\n```bash\nnpm run db:push\n```\n\nOr if you encounter issues:\n\n```bash\nnpm run db:push --force\n```\n\nThis will create all the tables in your MySQL database.\n\n### Step 5: Restart the Application\n\nAfter setting up the database, restart the application to connect to MySQL.\n\n## 🔄 Schema Changes Summary\n\n### Key MySQL Conversions:\n\n1. **UUIDs**: Changed from PostgreSQL's `gen_random_uuid()` to MySQL's `UUID()`\n   ```typescript\n   // PostgreSQL\n   id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`)\n   \n   // MySQL\n   id: varchar(\"id\", { length: 36 }).primaryKey().default(sql`(UUID())`)\n   ```\n\n2. **JSON Arrays**: Array types converted to JSON\n   ```typescript\n   // PostgreSQL\n   documentUrls: text(\"document_urls\").array().default([])\n   \n   // MySQL\n   documentUrls: json(\"document_urls\").$type<string[]>().default([])\n   ```\n\n3. **JSONB → JSON**: All JSONB fields converted to JSON\n   ```typescript\n   // PostgreSQL\n   metadata: jsonb(\"metadata\")\n   \n   // MySQL\n   metadata: json(\"metadata\")\n   ```\n\n## 📊 Tables in Your Schema\n\nThe following tables will be created in MySQL:\n\n- `sessions` - Session storage for Replit Auth\n- `users` - User accounts\n- `borrowers` - Borrower information\n- `loans` - Loan records\n- `payments` - Payment transactions\n- `reminders` - Email reminders\n- `email_logs` - Email activity logs\n- `email_templates` - Customizable email templates\n- `interest_entries` - Automatic monthly interest tracking\n- `audit_logs` - Security and audit trail\n\n## 🔍 Verify Connection\n\nAfter completing the steps above, check the server logs to verify successful MySQL connection:\n\n```\n✓ Connected to MySQL database\n```\n\n## 🚨 Troubleshooting\n\n### Error: \"Client does not support authentication protocol\"\nIf you get this error with MySQL 8.0+, you need to change the authentication method:\n\n```sql\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'your_password';\nFLUSH PRIVILEGES;\n```\n\n### Error: \"Access denied for user\"\n- Verify your username and password in the connection string\n- Make sure the MySQL user has proper permissions:\n  ```sql\n  GRANT ALL PRIVILEGES ON lending_app.* TO 'username'@'localhost';\n  FLUSH PRIVILEGES;\n  ```\n\n### Connection Timeout\n- Check if MySQL is running: `sudo service mysql status`\n- Verify the host and port in your connection string\n- Make sure your firewall allows MySQL connections\n\n## 📝 Notes\n\n- All existing data in PostgreSQL will **NOT** be migrated automatically\n- You'll need to manually export/import data if you need to preserve it\n- MySQL uses slightly different data types but all functionality remains the same\n- The application logic remains unchanged - only the database layer was updated\n\n## ✨ Benefits of MySQL\n\n- ✅ Consistency with your local development environment\n- ✅ Industry-standard relational database\n- ✅ Excellent performance for financial applications\n- ✅ Wide hosting support\n- ✅ Familiar tooling and ecosystem\n\n---\n\n**Next Steps:** Once you complete the manual steps above, your application will be fully running on MySQL! 🎉\n","size_bytes":5103},"client/src/pages/InterestHistory.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Calendar, TrendingUp, User, Wallet } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { InterestEntry } from \"@shared/schema\";\n\ninterface InterestEntryWithBorrower extends Omit<InterestEntry, 'borrowerName'> {\n  borrowerName: string | null;\n}\n\nexport default function InterestHistory() {\n  const { data: entries = [], isLoading } = useQuery<InterestEntryWithBorrower[]>({\n    queryKey: ['/api/interest-entries'],\n  });\n\n  const formatCurrency = (amount: string | number) => {\n    const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return `₹${num.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n  };\n\n  const formatDate = (date: Date | string) => {\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    return dateObj.toLocaleDateString('en-IN', {\n      day: '2-digit',\n      month: 'short',\n      year: 'numeric'\n    });\n  };\n\n  const formatPeriod = (start: Date | string, end: Date | string) => {\n    const startDate = typeof start === 'string' ? new Date(start) : start;\n    const endDate = typeof end === 'string' ? new Date(end) : end;\n    \n    const startMonth = startDate.toLocaleDateString('en-IN', { month: 'short', year: 'numeric' });\n    const endMonth = endDate.toLocaleDateString('en-IN', { month: 'short', year: 'numeric' });\n    \n    if (startMonth === endMonth) {\n      return startMonth;\n    }\n    return `${startMonth} - ${endMonth}`;\n  };\n\n  const totalInterest = entries.reduce(\n    (sum, entry) => sum + parseFloat(entry.interestAmount),\n    0\n  );\n\n  return (\n    <div className=\"p-8 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Interest History</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Track monthly interest calculations across all loans\n          </p>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              Total Interest Entries\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\" data-testid=\"text-total-entries\">\n              {entries.length}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              Total Interest Calculated\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-green-600\" data-testid=\"text-total-interest\">\n              {formatCurrency(totalInterest)}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              Auto-Generated Entries\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\" data-testid=\"text-auto-entries\">\n              {entries.filter(e => e.isAutoGenerated).length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Interest Entries List */}\n      {isLoading ? (\n        <div className=\"space-y-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <Skeleton key={i} className=\"h-32\" data-testid={`skeleton-entry-${i}`} />\n          ))}\n        </div>\n      ) : entries.length === 0 ? (\n        <div className=\"p-12 text-center border rounded-lg\">\n          <TrendingUp className=\"h-16 w-16 mx-auto mb-4 opacity-50 text-muted-foreground\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No Interest Entries Yet</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Interest entries will be automatically generated monthly for your active loans\n          </p>\n          <p className=\"text-sm text-muted-foreground\">\n            The system checks daily and creates interest entries on each loan's monthly anniversary\n          </p>\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {entries.map((entry) => (\n            <Card key={entry.id} className=\"hover-elevate\" data-testid={`card-interest-${entry.id}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1 space-y-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center\">\n                        <User className=\"h-5 w-5 text-primary\" />\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold\" data-testid={`text-borrower-${entry.id}`}>\n                          {entry.borrowerName || 'Unknown Borrower'}\n                        </h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {formatPeriod(entry.periodStart, entry.periodEnd)}\n                        </p>\n                      </div>\n                      {entry.isAutoGenerated && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          Auto-Generated\n                        </Badge>\n                      )}\n                    </div>\n\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-4\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                          <Wallet className=\"h-3 w-3\" />\n                          Principal\n                        </p>\n                        <p className=\"font-semibold\" data-testid={`text-principal-${entry.id}`}>\n                          {formatCurrency(entry.principalAmount)}\n                        </p>\n                      </div>\n\n                      <div>\n                        <p className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                          <TrendingUp className=\"h-3 w-3\" />\n                          Interest Rate\n                        </p>\n                        <p className=\"font-semibold\" data-testid={`text-rate-${entry.id}`}>\n                          {entry.interestRate}%\n                        </p>\n                      </div>\n\n                      <div>\n                        <p className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                          <Calendar className=\"h-3 w-3\" />\n                          Period Start\n                        </p>\n                        <p className=\"font-semibold text-sm\" data-testid={`text-period-start-${entry.id}`}>\n                          {formatDate(entry.periodStart)}\n                        </p>\n                      </div>\n\n                      <div>\n                        <p className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                          <Calendar className=\"h-3 w-3\" />\n                          Period End\n                        </p>\n                        <p className=\"font-semibold text-sm\" data-testid={`text-period-end-${entry.id}`}>\n                          {formatDate(entry.periodEnd)}\n                        </p>\n                      </div>\n                    </div>\n\n                    {entry.notes && (\n                      <p className=\"text-sm text-muted-foreground italic mt-2\">\n                        {entry.notes}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"ml-6 text-right\">\n                    <p className=\"text-sm text-muted-foreground mb-1\">Interest Amount</p>\n                    <p className=\"text-2xl font-bold text-green-600\" data-testid={`text-interest-amount-${entry.id}`}>\n                      {formatCurrency(entry.interestAmount)}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":8399},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Guard against SSR/non-browser environments\n    if (typeof window === \"undefined\") return \"light\";\n    const stored = localStorage.getItem(\"theme\");\n    return (stored as Theme) || \"light\";\n  });\n\n  useEffect(() => {\n    // Guard against SSR/non-browser environments\n    if (typeof window === \"undefined\") return;\n    \n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1293},"client/src/pages/EmailTemplates.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Mail, FileText } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertEmailTemplateSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\n\ntype EmailTemplate = {\n  id: string;\n  name: string;\n  type: string;\n  subject: string;\n  htmlBody: string;\n  placeholders: string[];\n  isDefault: boolean;\n  createdAt: string;\n};\n\nconst templateFormSchema = insertEmailTemplateSchema.extend({});\n\nexport default function EmailTemplates() {\n  const { toast } = useToast();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n\n  const { data: templates = [], isLoading } = useQuery<EmailTemplate[]>({\n    queryKey: [\"/api/email-templates\"],\n  });\n\n  const form = useForm<z.infer<typeof templateFormSchema>>({\n    resolver: zodResolver(templateFormSchema),\n    defaultValues: {\n      name: \"\",\n      type: \"reminder\",\n      subject: \"\",\n      htmlBody: \"\",\n      placeholders: [],\n      isDefault: false,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof templateFormSchema>) => {\n      return apiRequest(\"POST\", \"/api/email-templates\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/email-templates\"] });\n      toast({\n        title: \"Success\",\n        description: \"Email template created successfully\",\n      });\n      form.reset();\n      setIsAddDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create template\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof templateFormSchema>) => {\n    createMutation.mutate(data);\n  };\n\n  const getTypeBadge = (type: string) => {\n    const colors = {\n      reminder: \"bg-blue-500/10 text-blue-600\",\n      receipt: \"bg-green-500/10 text-green-600\",\n      statement: \"bg-purple-500/10 text-purple-600\",\n    };\n    return (\n      <Badge className={`${colors[type as keyof typeof colors] || \"\"} hover-elevate`}>\n        {type}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\" data-testid=\"heading-templates\">\n            Email Templates\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Create and manage email templates for automated communications\n          </p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-template\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Template\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Create Email Template</DialogTitle>\n              <DialogDescription>\n                Create a reusable email template with placeholders for automated communications\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Template Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Monthly Payment Reminder\"\n                          {...field}\n                          data-testid=\"input-template-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"type\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Template Type</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-template-type\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"reminder\">Reminder</SelectItem>\n                          <SelectItem value=\"receipt\">Receipt</SelectItem>\n                          <SelectItem value=\"statement\">Statement</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"subject\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Subject</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Payment Reminder - {{borrowerName}}\"\n                          {...field}\n                          data-testid=\"input-template-subject\"\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Use placeholders like {\"{{\"} borrowerName {\"}}\"}, {\"{{\"} amount {\"}}\"}, {\"{{\"} dueDate {\"}}\"}\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"htmlBody\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Body (HTML)</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"<p>Dear {{borrowerName}},</p><p>Your payment of {{amount}} is due on {{dueDate}}.</p>\"\n                          rows={8}\n                          {...field}\n                          data-testid=\"input-template-body\"\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Write HTML content with placeholders for dynamic data\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={createMutation.isPending}\n                  data-testid=\"button-submit-template\"\n                >\n                  {createMutation.isPending ? \"Creating...\" : \"Create Template\"}\n                </Button>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {isLoading ? (\n        <div className=\"text-center py-12\">\n          <div className=\"h-8 w-8 animate-spin rounded-full border-4 border-primary border-t-transparent mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading templates...</p>\n        </div>\n      ) : templates.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Mail className=\"h-16 w-16 mx-auto mb-4 opacity-50 text-muted-foreground\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Templates Yet</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Create your first email template to automate communications\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4 md:grid-cols-2\">\n          {templates.map((template) => (\n            <Card key={template.id} data-testid={`card-template-${template.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg\" data-testid=\"text-template-name\">\n                      {template.name}\n                    </CardTitle>\n                    <CardDescription className=\"mt-1\">\n                      {template.subject}\n                    </CardDescription>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {getTypeBadge(template.type)}\n                    {template.isDefault && (\n                      <Badge variant=\"outline\">Default</Badge>\n                    )}\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div>\n                    <div className=\"text-xs font-medium text-muted-foreground mb-1\">\n                      Preview (HTML Source)\n                    </div>\n                    <div className=\"text-sm border rounded-md p-3 bg-muted/30 max-h-32 overflow-y-auto font-mono text-xs\">\n                      {template.htmlBody.slice(0, 200) + (template.htmlBody.length > 200 ? \"...\" : \"\")}\n                    </div>\n                  </div>\n                  {template.placeholders && template.placeholders.length > 0 && (\n                    <div>\n                      <div className=\"text-xs font-medium text-muted-foreground mb-1\">\n                        Placeholders\n                      </div>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {template.placeholders.map((placeholder, i) => (\n                          <Badge key={i} variant=\"secondary\" className=\"text-xs\">\n                            {placeholder}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":11053},"client/src/pages/Reminders.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Send, Calendar, CheckCircle2, XCircle, Clock } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertReminderSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { format } from \"date-fns\";\n\ntype Reminder = {\n  id: string;\n  title: string;\n  message: string;\n  borrowerId: string | null;\n  reminderType: string;\n  scheduledFor: string;\n  status: string;\n  sentAt: string | null;\n  failureReason: string | null;\n  isRecurring: boolean;\n  createdAt: string;\n};\n\ntype Borrower = {\n  id: string;\n  name: string;\n  email: string;\n};\n\nconst reminderFormSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  message: z.string().min(1, \"Message is required\"),\n  reminderType: z.string(),\n  borrowerId: z.string().optional(),\n  scheduledFor: z.string(),\n  status: z.string().optional(),\n  isRecurring: z.boolean().optional(),\n});\n\nexport default function Reminders() {\n  const { toast } = useToast();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n\n  const { data: reminders = [], isLoading: remindersLoading } = useQuery<Reminder[]>({\n    queryKey: [\"/api/reminders\"],\n  });\n\n  const { data: borrowers = [] } = useQuery<Borrower[]>({\n    queryKey: [\"/api/borrowers\"],\n  });\n\n  const form = useForm<z.infer<typeof reminderFormSchema>>({\n    resolver: zodResolver(reminderFormSchema),\n    defaultValues: {\n      title: \"\",\n      message: \"\",\n      reminderType: \"payment\",\n      borrowerId: \"__all__\",\n      scheduledFor: new Date().toISOString().slice(0, 16),\n      status: \"pending\",\n      isRecurring: false,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof reminderFormSchema>) => {\n      const payload = {\n        ...data,\n        scheduledFor: new Date(data.scheduledFor),\n        // Send null instead of empty string or __all__ for borrowerId\n        borrowerId: data.borrowerId && data.borrowerId !== \"__all__\" ? data.borrowerId : null,\n      };\n      return apiRequest(\"POST\", \"/api/reminders\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/reminders\"] });\n      toast({\n        title: \"Success\",\n        description: \"Reminder created successfully\",\n      });\n      form.reset();\n      setIsAddDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create reminder\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const sendMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"POST\", `/api/reminders/${id}/send`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/reminders\"] });\n      toast({\n        title: \"Success\",\n        description: \"Reminder sent successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send reminder\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof reminderFormSchema>) => {\n    createMutation.mutate(data);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"sent\":\n        return (\n          <Badge className=\"bg-green-500/10 text-green-600 hover-elevate\">\n            <CheckCircle2 className=\"h-3 w-3 mr-1\" />\n            Sent\n          </Badge>\n        );\n      case \"failed\":\n        return (\n          <Badge className=\"bg-red-500/10 text-red-600 hover-elevate\">\n            <XCircle className=\"h-3 w-3 mr-1\" />\n            Failed\n          </Badge>\n        );\n      case \"pending\":\n        return (\n          <Badge className=\"bg-yellow-500/10 text-yellow-600 hover-elevate\">\n            <Clock className=\"h-3 w-3 mr-1\" />\n            Pending\n          </Badge>\n        );\n      default:\n        return <Badge>{status}</Badge>;\n    }\n  };\n\n  const getBorrowerName = (borrowerId: string | null) => {\n    if (!borrowerId) return \"All Borrowers\";\n    const borrower = borrowers.find((b) => b.id === borrowerId);\n    return borrower?.name || \"Unknown\";\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\" data-testid=\"heading-reminders\">\n            Reminders\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Schedule and manage payment reminders\n          </p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-reminder\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Reminder\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Create Reminder</DialogTitle>\n              <DialogDescription>\n                Schedule a reminder for payment or other notifications\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Payment Due Reminder\"\n                          {...field}\n                          data-testid=\"input-reminder-title\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"reminderType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Type</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-reminder-type\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"payment\">Payment</SelectItem>\n                          <SelectItem value=\"interest\">Interest</SelectItem>\n                          <SelectItem value=\"custom\">Custom</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"borrowerId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Borrower (Optional)</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        value={field.value || \"\"}\n                      >\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-reminder-borrower\">\n                            <SelectValue placeholder=\"All Borrowers\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"__all__\">All Borrowers</SelectItem>\n                          {borrowers.map((borrower) => (\n                            <SelectItem key={borrower.id} value={borrower.id}>\n                              {borrower.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"scheduledFor\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Scheduled For</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"datetime-local\"\n                          {...field}\n                          data-testid=\"input-reminder-scheduled\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"message\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Message</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Your payment is due soon...\"\n                          rows={4}\n                          {...field}\n                          data-testid=\"input-reminder-message\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={createMutation.isPending}\n                  data-testid=\"button-submit-reminder\"\n                >\n                  {createMutation.isPending ? \"Creating...\" : \"Create Reminder\"}\n                </Button>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {remindersLoading ? (\n        <div className=\"text-center py-12\">\n          <div className=\"h-8 w-8 animate-spin rounded-full border-4 border-primary border-t-transparent mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading reminders...</p>\n        </div>\n      ) : reminders.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Calendar className=\"h-16 w-16 mx-auto mb-4 opacity-50 text-muted-foreground\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Reminders Yet</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Create your first reminder to schedule notifications\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4\">\n          {reminders.map((reminder) => (\n            <Card key={reminder.id} data-testid={`card-reminder-${reminder.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle className=\"text-lg\" data-testid=\"text-reminder-title\">\n                      {reminder.title}\n                    </CardTitle>\n                    <div className=\"flex items-center gap-2 mt-2\">\n                      {getStatusBadge(reminder.status)}\n                      <Badge variant=\"outline\">{reminder.reminderType}</Badge>\n                    </div>\n                  </div>\n                  {reminder.status === \"pending\" && (\n                    <Button\n                      size=\"sm\"\n                      onClick={() => sendMutation.mutate(reminder.id)}\n                      disabled={sendMutation.isPending}\n                      data-testid={`button-send-reminder-${reminder.id}`}\n                    >\n                      <Send className=\"h-4 w-4 mr-1\" />\n                      Send Now\n                    </Button>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm\" data-testid=\"text-reminder-message\">\n                    {reminder.message}\n                  </p>\n                  <div className=\"text-sm text-muted-foreground space-y-1\">\n                    <div>\n                      <span className=\"font-medium\">Borrower:</span>{\" \"}\n                      {getBorrowerName(reminder.borrowerId)}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Scheduled:</span>{\" \"}\n                      {format(new Date(reminder.scheduledFor), \"PPpp\")}\n                    </div>\n                    {reminder.sentAt && (\n                      <div>\n                        <span className=\"font-medium\">Sent:</span>{\" \"}\n                        {format(new Date(reminder.sentAt), \"PPpp\")}\n                      </div>\n                    )}\n                    {reminder.failureReason && (\n                      <div className=\"text-red-600\">\n                        <span className=\"font-medium\">Error:</span> {reminder.failureReason}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":14071}},"version":2}